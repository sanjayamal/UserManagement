{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\nimport { SSOTypes, Constants, PromptState, libraryVersion } from \"./utils/Constants\";\nimport { StringUtils } from \"./utils/StringUtils\";\n/**\n * Nonce: OIDC Nonce definition: https://openid.net/specs/openid-connect-core-1_0.html#IDToken\n * State: OAuth Spec: https://tools.ietf.org/html/rfc6749#section-10.12\n * @hidden\n */\n\nvar ServerRequestParameters =\n/** @class */\nfunction () {\n  /**\n   * Constructor\n   * @param authority\n   * @param clientId\n   * @param scope\n   * @param responseType\n   * @param redirectUri\n   * @param state\n   */\n  function ServerRequestParameters(authority, clientId, responseType, redirectUri, scopes, state, correlationId) {\n    this.authorityInstance = authority;\n    this.clientId = clientId;\n    this.nonce = CryptoUtils.createNewGuid(); // set scope to clientId if null\n\n    this.scopes = scopes ? scopes.slice() : [clientId]; // set state (already set at top level)\n\n    this.state = state; // set correlationId\n\n    this.correlationId = correlationId; // telemetry information\n\n    this.xClientSku = \"MSAL.JS\";\n    this.xClientVer = libraryVersion();\n    this.responseType = responseType;\n    this.redirectUri = redirectUri;\n  }\n\n  Object.defineProperty(ServerRequestParameters.prototype, \"authority\", {\n    get: function () {\n      return this.authorityInstance ? this.authorityInstance.CanonicalAuthority : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   * @ignore\n   *\n   * Utility to populate QueryParameters and ExtraQueryParameters to ServerRequestParamerers\n   * @param request\n   * @param serverAuthenticationRequest\n   */\n\n  ServerRequestParameters.prototype.populateQueryParams = function (account, request, adalIdTokenObject) {\n    var queryParameters = {};\n\n    if (request) {\n      // add the prompt parameter to serverRequestParameters if passed\n      if (request.prompt) {\n        this.promptValue = request.prompt;\n      } // Add claims challenge to serverRequestParameters if passed\n\n\n      if (request.claimsRequest) {\n        this.claimsValue = request.claimsRequest;\n      } // if the developer provides one of these, give preference to developer choice\n\n\n      if (ServerRequestParameters.isSSOParam(request)) {\n        queryParameters = this.constructUnifiedCacheQueryParameter(request, null);\n      }\n    }\n\n    if (adalIdTokenObject) {\n      queryParameters = this.constructUnifiedCacheQueryParameter(null, adalIdTokenObject);\n    }\n    /*\n     * adds sid/login_hint if not populated; populates domain_req, login_req and domain_hint\n     * this.logger.verbose(\"Calling addHint parameters\");\n     */\n\n\n    queryParameters = this.addHintParameters(account, queryParameters); // sanity check for developer passed extraQueryParameters\n\n    var eQParams = request.extraQueryParameters; // Populate the extraQueryParameters to be sent to the server\n\n    this.queryParameters = ServerRequestParameters.generateQueryParametersString(queryParameters);\n    this.extraQueryParameters = ServerRequestParameters.generateQueryParametersString(eQParams);\n  }; // #region QueryParam helpers\n\n  /**\n   * Constructs extraQueryParameters to be sent to the server for the AuthenticationParameters set by the developer\n   * in any login() or acquireToken() calls\n   * @param idTokenObject\n   * @param extraQueryParameters\n   * @param sid\n   * @param loginHint\n   */\n  // TODO: check how this behaves when domain_hint only is sent in extraparameters and idToken has no upn.\n\n\n  ServerRequestParameters.prototype.constructUnifiedCacheQueryParameter = function (request, idTokenObject) {\n    // preference order: account > sid > login_hint\n    var ssoType;\n    var ssoData;\n    var serverReqParam = {}; // if account info is passed, account.sid > account.login_hint\n\n    if (request) {\n      if (request.account) {\n        var account = request.account;\n\n        if (account.sid) {\n          ssoType = SSOTypes.SID;\n          ssoData = account.sid;\n        } else if (account.userName) {\n          ssoType = SSOTypes.LOGIN_HINT;\n          ssoData = account.userName;\n        }\n      } // sid from request\n      else if (request.sid) {\n          ssoType = SSOTypes.SID;\n          ssoData = request.sid;\n        } // loginHint from request\n        else if (request.loginHint) {\n            ssoType = SSOTypes.LOGIN_HINT;\n            ssoData = request.loginHint;\n          }\n    } // adalIdToken retrieved from cache\n    else if (idTokenObject) {\n        if (idTokenObject.hasOwnProperty(Constants.upn)) {\n          ssoType = SSOTypes.ID_TOKEN;\n          ssoData = idTokenObject.upn;\n        } else {\n          ssoType = SSOTypes.ORGANIZATIONS;\n          ssoData = null;\n        }\n      }\n\n    serverReqParam = this.addSSOParameter(ssoType, ssoData); // add the HomeAccountIdentifier info/ domain_hint\n\n    if (request && request.account && request.account.homeAccountIdentifier) {\n      serverReqParam = this.addSSOParameter(SSOTypes.HOMEACCOUNT_ID, request.account.homeAccountIdentifier, serverReqParam);\n    }\n\n    return serverReqParam;\n  };\n  /**\n   * @hidden\n   *\n   * Adds login_hint to authorization URL which is used to pre-fill the username field of sign in page for the user if known ahead of time\n   * domain_hint can be one of users/organizations which when added skips the email based discovery process of the user\n   * domain_req utid received as part of the clientInfo\n   * login_req uid received as part of clientInfo\n   * Also does a sanity check for extraQueryParameters passed by the user to ensure no repeat queryParameters\n   *\n   * @param {@link Account} account - Account for which the token is requested\n   * @param queryparams\n   * @param {@link ServerRequestParameters}\n   * @ignore\n   */\n\n\n  ServerRequestParameters.prototype.addHintParameters = function (account, qParams) {\n    /*\n     * This is a final check for all queryParams added so far; preference order: sid > login_hint\n     * sid cannot be passed along with login_hint or domain_hint, hence we check both are not populated yet in queryParameters\n     */\n    if (account && !qParams[SSOTypes.SID]) {\n      // sid - populate only if login_hint is not already populated and the account has sid\n      var populateSID = !qParams[SSOTypes.LOGIN_HINT] && account.sid && this.promptValue === PromptState.NONE;\n\n      if (populateSID) {\n        qParams = this.addSSOParameter(SSOTypes.SID, account.sid, qParams);\n      } // login_hint - account.userName\n      else {\n          var populateLoginHint = !qParams[SSOTypes.LOGIN_HINT] && account.userName && !StringUtils.isEmpty(account.userName);\n\n          if (populateLoginHint) {\n            qParams = this.addSSOParameter(SSOTypes.LOGIN_HINT, account.userName, qParams);\n          }\n        }\n\n      var populateReqParams = !qParams[SSOTypes.DOMAIN_REQ] && !qParams[SSOTypes.LOGIN_REQ];\n\n      if (populateReqParams) {\n        qParams = this.addSSOParameter(SSOTypes.HOMEACCOUNT_ID, account.homeAccountIdentifier, qParams);\n      }\n    }\n\n    return qParams;\n  };\n  /**\n   * Add SID to extraQueryParameters\n   * @param sid\n   */\n\n\n  ServerRequestParameters.prototype.addSSOParameter = function (ssoType, ssoData, ssoParam) {\n    if (!ssoParam) {\n      ssoParam = {};\n    }\n\n    if (!ssoData) {\n      return ssoParam;\n    }\n\n    switch (ssoType) {\n      case SSOTypes.SID:\n        {\n          ssoParam[SSOTypes.SID] = ssoData;\n          break;\n        }\n\n      case SSOTypes.ID_TOKEN:\n        {\n          ssoParam[SSOTypes.LOGIN_HINT] = ssoData;\n          ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;\n          break;\n        }\n\n      case SSOTypes.LOGIN_HINT:\n        {\n          ssoParam[SSOTypes.LOGIN_HINT] = ssoData;\n          break;\n        }\n\n      case SSOTypes.ORGANIZATIONS:\n        {\n          ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;\n          break;\n        }\n\n      case SSOTypes.CONSUMERS:\n        {\n          ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.CONSUMERS;\n          break;\n        }\n\n      case SSOTypes.HOMEACCOUNT_ID:\n        {\n          var homeAccountId = ssoData.split(\".\");\n          var uid = CryptoUtils.base64Decode(homeAccountId[0]);\n          var utid = CryptoUtils.base64Decode(homeAccountId[1]); // TODO: domain_req and login_req are not needed according to eSTS team\n\n          ssoParam[SSOTypes.LOGIN_REQ] = uid;\n          ssoParam[SSOTypes.DOMAIN_REQ] = utid;\n\n          if (utid === Constants.consumersUtid) {\n            ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.CONSUMERS;\n          } else {\n            ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;\n          }\n\n          break;\n        }\n\n      case SSOTypes.LOGIN_REQ:\n        {\n          ssoParam[SSOTypes.LOGIN_REQ] = ssoData;\n          break;\n        }\n\n      case SSOTypes.DOMAIN_REQ:\n        {\n          ssoParam[SSOTypes.DOMAIN_REQ] = ssoData;\n          break;\n        }\n    }\n\n    return ssoParam;\n  };\n  /**\n   * Utility to generate a QueryParameterString from a Key-Value mapping of extraQueryParameters passed\n   * @param extraQueryParameters\n   */\n\n\n  ServerRequestParameters.generateQueryParametersString = function (queryParameters) {\n    var paramsString = null;\n\n    if (queryParameters) {\n      Object.keys(queryParameters).forEach(function (key) {\n        if (paramsString == null) {\n          paramsString = key + \"=\" + encodeURIComponent(queryParameters[key]);\n        } else {\n          paramsString += \"&\" + key + \"=\" + encodeURIComponent(queryParameters[key]);\n        }\n      });\n    }\n\n    return paramsString;\n  }; // #endregion\n\n  /**\n   * Check to see if there are SSO params set in the Request\n   * @param request\n   */\n\n\n  ServerRequestParameters.isSSOParam = function (request) {\n    return request && (request.account || request.sid || request.loginHint);\n  };\n\n  return ServerRequestParameters;\n}();\n\nexport { ServerRequestParameters };","map":{"version":3,"sources":["../src/ServerRequestParameters.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\nimport { SSOTypes, Constants, PromptState, libraryVersion } from \"./utils/Constants\";\nimport { StringUtils } from \"./utils/StringUtils\";\n/**\n * Nonce: OIDC Nonce definition: https://openid.net/specs/openid-connect-core-1_0.html#IDToken\n * State: OAuth Spec: https://tools.ietf.org/html/rfc6749#section-10.12\n * @hidden\n */\nvar ServerRequestParameters = /** @class */ (function () {\n    /**\n     * Constructor\n     * @param authority\n     * @param clientId\n     * @param scope\n     * @param responseType\n     * @param redirectUri\n     * @param state\n     */\n    function ServerRequestParameters(authority, clientId, responseType, redirectUri, scopes, state, correlationId) {\n        this.authorityInstance = authority;\n        this.clientId = clientId;\n        this.nonce = CryptoUtils.createNewGuid();\n        // set scope to clientId if null\n        this.scopes = scopes ? scopes.slice() : [clientId];\n        // set state (already set at top level)\n        this.state = state;\n        // set correlationId\n        this.correlationId = correlationId;\n        // telemetry information\n        this.xClientSku = \"MSAL.JS\";\n        this.xClientVer = libraryVersion();\n        this.responseType = responseType;\n        this.redirectUri = redirectUri;\n    }\n    Object.defineProperty(ServerRequestParameters.prototype, \"authority\", {\n        get: function () {\n            return this.authorityInstance ? this.authorityInstance.CanonicalAuthority : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     * @ignore\n     *\n     * Utility to populate QueryParameters and ExtraQueryParameters to ServerRequestParamerers\n     * @param request\n     * @param serverAuthenticationRequest\n     */\n    ServerRequestParameters.prototype.populateQueryParams = function (account, request, adalIdTokenObject) {\n        var queryParameters = {};\n        if (request) {\n            // add the prompt parameter to serverRequestParameters if passed\n            if (request.prompt) {\n                this.promptValue = request.prompt;\n            }\n            // Add claims challenge to serverRequestParameters if passed\n            if (request.claimsRequest) {\n                this.claimsValue = request.claimsRequest;\n            }\n            // if the developer provides one of these, give preference to developer choice\n            if (ServerRequestParameters.isSSOParam(request)) {\n                queryParameters = this.constructUnifiedCacheQueryParameter(request, null);\n            }\n        }\n        if (adalIdTokenObject) {\n            queryParameters = this.constructUnifiedCacheQueryParameter(null, adalIdTokenObject);\n        }\n        /*\n         * adds sid/login_hint if not populated; populates domain_req, login_req and domain_hint\n         * this.logger.verbose(\"Calling addHint parameters\");\n         */\n        queryParameters = this.addHintParameters(account, queryParameters);\n        // sanity check for developer passed extraQueryParameters\n        var eQParams = request.extraQueryParameters;\n        // Populate the extraQueryParameters to be sent to the server\n        this.queryParameters = ServerRequestParameters.generateQueryParametersString(queryParameters);\n        this.extraQueryParameters = ServerRequestParameters.generateQueryParametersString(eQParams);\n    };\n    // #region QueryParam helpers\n    /**\n     * Constructs extraQueryParameters to be sent to the server for the AuthenticationParameters set by the developer\n     * in any login() or acquireToken() calls\n     * @param idTokenObject\n     * @param extraQueryParameters\n     * @param sid\n     * @param loginHint\n     */\n    // TODO: check how this behaves when domain_hint only is sent in extraparameters and idToken has no upn.\n    ServerRequestParameters.prototype.constructUnifiedCacheQueryParameter = function (request, idTokenObject) {\n        // preference order: account > sid > login_hint\n        var ssoType;\n        var ssoData;\n        var serverReqParam = {};\n        // if account info is passed, account.sid > account.login_hint\n        if (request) {\n            if (request.account) {\n                var account = request.account;\n                if (account.sid) {\n                    ssoType = SSOTypes.SID;\n                    ssoData = account.sid;\n                }\n                else if (account.userName) {\n                    ssoType = SSOTypes.LOGIN_HINT;\n                    ssoData = account.userName;\n                }\n            }\n            // sid from request\n            else if (request.sid) {\n                ssoType = SSOTypes.SID;\n                ssoData = request.sid;\n            }\n            // loginHint from request\n            else if (request.loginHint) {\n                ssoType = SSOTypes.LOGIN_HINT;\n                ssoData = request.loginHint;\n            }\n        }\n        // adalIdToken retrieved from cache\n        else if (idTokenObject) {\n            if (idTokenObject.hasOwnProperty(Constants.upn)) {\n                ssoType = SSOTypes.ID_TOKEN;\n                ssoData = idTokenObject.upn;\n            }\n            else {\n                ssoType = SSOTypes.ORGANIZATIONS;\n                ssoData = null;\n            }\n        }\n        serverReqParam = this.addSSOParameter(ssoType, ssoData);\n        // add the HomeAccountIdentifier info/ domain_hint\n        if (request && request.account && request.account.homeAccountIdentifier) {\n            serverReqParam = this.addSSOParameter(SSOTypes.HOMEACCOUNT_ID, request.account.homeAccountIdentifier, serverReqParam);\n        }\n        return serverReqParam;\n    };\n    /**\n     * @hidden\n     *\n     * Adds login_hint to authorization URL which is used to pre-fill the username field of sign in page for the user if known ahead of time\n     * domain_hint can be one of users/organizations which when added skips the email based discovery process of the user\n     * domain_req utid received as part of the clientInfo\n     * login_req uid received as part of clientInfo\n     * Also does a sanity check for extraQueryParameters passed by the user to ensure no repeat queryParameters\n     *\n     * @param {@link Account} account - Account for which the token is requested\n     * @param queryparams\n     * @param {@link ServerRequestParameters}\n     * @ignore\n     */\n    ServerRequestParameters.prototype.addHintParameters = function (account, qParams) {\n        /*\n         * This is a final check for all queryParams added so far; preference order: sid > login_hint\n         * sid cannot be passed along with login_hint or domain_hint, hence we check both are not populated yet in queryParameters\n         */\n        if (account && !qParams[SSOTypes.SID]) {\n            // sid - populate only if login_hint is not already populated and the account has sid\n            var populateSID = !qParams[SSOTypes.LOGIN_HINT] && account.sid && this.promptValue === PromptState.NONE;\n            if (populateSID) {\n                qParams = this.addSSOParameter(SSOTypes.SID, account.sid, qParams);\n            }\n            // login_hint - account.userName\n            else {\n                var populateLoginHint = !qParams[SSOTypes.LOGIN_HINT] && account.userName && !StringUtils.isEmpty(account.userName);\n                if (populateLoginHint) {\n                    qParams = this.addSSOParameter(SSOTypes.LOGIN_HINT, account.userName, qParams);\n                }\n            }\n            var populateReqParams = !qParams[SSOTypes.DOMAIN_REQ] && !qParams[SSOTypes.LOGIN_REQ];\n            if (populateReqParams) {\n                qParams = this.addSSOParameter(SSOTypes.HOMEACCOUNT_ID, account.homeAccountIdentifier, qParams);\n            }\n        }\n        return qParams;\n    };\n    /**\n     * Add SID to extraQueryParameters\n     * @param sid\n     */\n    ServerRequestParameters.prototype.addSSOParameter = function (ssoType, ssoData, ssoParam) {\n        if (!ssoParam) {\n            ssoParam = {};\n        }\n        if (!ssoData) {\n            return ssoParam;\n        }\n        switch (ssoType) {\n            case SSOTypes.SID: {\n                ssoParam[SSOTypes.SID] = ssoData;\n                break;\n            }\n            case SSOTypes.ID_TOKEN: {\n                ssoParam[SSOTypes.LOGIN_HINT] = ssoData;\n                ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;\n                break;\n            }\n            case SSOTypes.LOGIN_HINT: {\n                ssoParam[SSOTypes.LOGIN_HINT] = ssoData;\n                break;\n            }\n            case SSOTypes.ORGANIZATIONS: {\n                ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;\n                break;\n            }\n            case SSOTypes.CONSUMERS: {\n                ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.CONSUMERS;\n                break;\n            }\n            case SSOTypes.HOMEACCOUNT_ID: {\n                var homeAccountId = ssoData.split(\".\");\n                var uid = CryptoUtils.base64Decode(homeAccountId[0]);\n                var utid = CryptoUtils.base64Decode(homeAccountId[1]);\n                // TODO: domain_req and login_req are not needed according to eSTS team\n                ssoParam[SSOTypes.LOGIN_REQ] = uid;\n                ssoParam[SSOTypes.DOMAIN_REQ] = utid;\n                if (utid === Constants.consumersUtid) {\n                    ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.CONSUMERS;\n                }\n                else {\n                    ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;\n                }\n                break;\n            }\n            case SSOTypes.LOGIN_REQ: {\n                ssoParam[SSOTypes.LOGIN_REQ] = ssoData;\n                break;\n            }\n            case SSOTypes.DOMAIN_REQ: {\n                ssoParam[SSOTypes.DOMAIN_REQ] = ssoData;\n                break;\n            }\n        }\n        return ssoParam;\n    };\n    /**\n     * Utility to generate a QueryParameterString from a Key-Value mapping of extraQueryParameters passed\n     * @param extraQueryParameters\n     */\n    ServerRequestParameters.generateQueryParametersString = function (queryParameters) {\n        var paramsString = null;\n        if (queryParameters) {\n            Object.keys(queryParameters).forEach(function (key) {\n                if (paramsString == null) {\n                    paramsString = key + \"=\" + encodeURIComponent(queryParameters[key]);\n                }\n                else {\n                    paramsString += \"&\" + key + \"=\" + encodeURIComponent(queryParameters[key]);\n                }\n            });\n        }\n        return paramsString;\n    };\n    // #endregion\n    /**\n     * Check to see if there are SSO params set in the Request\n     * @param request\n     */\n    ServerRequestParameters.isSSOParam = function (request) {\n        return request && (request.account || request.sid || request.loginHint);\n    };\n    return ServerRequestParameters;\n}());\nexport { ServerRequestParameters };\n//# sourceMappingURL=ServerRequestParameters.js.map"]},"metadata":{},"sourceType":"module"}