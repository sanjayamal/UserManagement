{"ast":null,"code":"var _jsxFileName = \"D:\\\\Assignment\\\\graph-tutorial\\\\src\\\\AuthProvider.tsx\";\nimport React from 'react';\nimport { UserAgentApplication } from 'msal';\nimport { getUserDetails } from './GraphService';\nimport { config } from './Config';\nexport default function withAuthProvider(WrappedComponent) {\n  var _temp;\n\n  return _temp = class extends React.Component {\n    constructor(props) {\n      super(props);\n      this.userAgentApplication = void 0;\n      this.state = {\n        error: null,\n        isAuthenticated: false,\n        user: {}\n      }; // Initialize the MSAL application object\n\n      this.userAgentApplication = new UserAgentApplication({\n        auth: {\n          clientId: config.appId,\n          redirectUri: config.redirectUri\n        },\n        cache: {\n          cacheLocation: \"sessionStorage\",\n          storeAuthStateInCookie: true\n        }\n      });\n    }\n\n    componentDidMount() {\n      // If MSAL already has an account, the user\n      // is already logged in\n      var account = this.userAgentApplication.getAccount();\n\n      if (account) {\n        // Enhance user object with data from Graph\n        this.getUserProfile();\n      }\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(WrappedComponent, Object.assign({\n        error: this.state.error,\n        isAuthenticated: this.state.isAuthenticated,\n        user: this.state.user,\n        login: () => this.login(),\n        logout: () => this.logout(),\n        getAccessToken: scopes => this.getAccessToken(scopes),\n        setError: (message, debug) => this.setErrorMessage(message, debug)\n      }, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 14\n        }\n      }));\n    }\n\n    async login() {\n      try {\n        // Login via popup\n        await this.userAgentApplication.loginPopup({\n          authority: config.authority,\n          scopes: config.scopes,\n          prompt: \"select_account\"\n        }); // After login, get the user's profile\n\n        await this.getUserProfile();\n      } catch (err) {\n        this.setState({\n          isAuthenticated: false,\n          user: {},\n          error: this.normalizeError(err)\n        });\n      }\n    }\n\n    logout() {\n      this.userAgentApplication.logout();\n    }\n\n    async getAccessToken(scopes) {\n      try {\n        // Get the access token silently\n        // If the cache contains a non-expired token, this function\n        // will just return the cached token. Otherwise, it will\n        // make a request to the Azure OAuth endpoint to get a token\n        var silentResult = await this.userAgentApplication.acquireTokenSilent({\n          scopes: scopes\n        });\n        return silentResult.accessToken;\n      } catch (err) {\n        // If a silent request fails, it may be because the user needs\n        // to login or grant consent to one or more of the requested scopes\n        if (this.isInteractionRequired(err)) {\n          var interactiveResult = await this.userAgentApplication.acquireTokenPopup({\n            scopes: scopes\n          });\n          return interactiveResult.accessToken;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    async getUserProfile() {\n      try {\n        var accessToken = await this.getAccessToken(config.scopes);\n\n        if (accessToken) {\n          // Get the user's profile from Graph\n          var user = await getUserDetails(accessToken);\n          this.setState({\n            isAuthenticated: true,\n            user: {\n              displayName: user.displayName,\n              email: user.mail || user.userPrincipalName\n            },\n            error: null\n          });\n        }\n      } catch (err) {\n        this.setState({\n          isAuthenticated: false,\n          user: {},\n          error: this.normalizeError(err)\n        });\n      }\n    }\n\n    setErrorMessage(message, debug) {\n      this.setState({\n        error: {\n          message: message,\n          debug: debug\n        }\n      });\n    }\n\n    normalizeError(error) {\n      var normalizedError = {};\n\n      if (typeof error === 'string') {\n        var errParts = error.split('|');\n        normalizedError = errParts.length > 1 ? {\n          message: errParts[1],\n          debug: errParts[0]\n        } : {\n          message: error\n        };\n      } else {\n        normalizedError = {\n          message: error.message,\n          debug: JSON.stringify(error)\n        };\n      }\n\n      return normalizedError;\n    }\n\n    isInteractionRequired(error) {\n      if (!error.message || error.message.length <= 0) {\n        return false;\n      }\n\n      return error.message.indexOf('consent_required') > -1 || error.message.indexOf('interaction_required') > -1 || error.message.indexOf('login_required') > -1;\n    }\n\n  }, _temp;\n}","map":{"version":3,"sources":["D:/Assignment/graph-tutorial/src/AuthProvider.tsx"],"names":["React","UserAgentApplication","getUserDetails","config","withAuthProvider","WrappedComponent","Component","constructor","props","userAgentApplication","state","error","isAuthenticated","user","auth","clientId","appId","redirectUri","cache","cacheLocation","storeAuthStateInCookie","componentDidMount","account","getAccount","getUserProfile","render","login","logout","scopes","getAccessToken","message","debug","setErrorMessage","loginPopup","authority","prompt","err","setState","normalizeError","silentResult","acquireTokenSilent","accessToken","isInteractionRequired","interactiveResult","acquireTokenPopup","displayName","email","mail","userPrincipalName","normalizedError","errParts","split","length","JSON","stringify","indexOf"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { UserAgentApplication } from 'msal';\r\nimport { getUserDetails } from './GraphService';\r\nimport { config } from './Config';\r\n\r\nexport interface AuthComponentProps {\r\n  error: any;\r\n  isAuthenticated: boolean;\r\n  user: any;\r\n  login: Function;\r\n  logout: Function;\r\n  getAccessToken: Function;\r\n  setError: Function;\r\n}\r\n\r\ninterface AuthProviderState {\r\n  error: any;\r\n  isAuthenticated: boolean;\r\n  user: any;\r\n}\r\n\r\nexport default function withAuthProvider<T extends React.Component<AuthComponentProps>>\r\n  (WrappedComponent: new(props: AuthComponentProps, context?: any) => T): React.ComponentClass {\r\n  return class extends React.Component<any, AuthProviderState> {\r\n    private userAgentApplication: UserAgentApplication;\r\n\r\n    constructor(props: any) {\r\n      super(props);\r\n      this.state = {\r\n        error: null,\r\n        isAuthenticated: false,\r\n        user: {}\r\n      };\r\n\r\n      // Initialize the MSAL application object\r\n      this.userAgentApplication = new UserAgentApplication({\r\n        auth: {\r\n            clientId: config.appId,\r\n            redirectUri: config.redirectUri\r\n        },\r\n        cache: {\r\n            cacheLocation: \"sessionStorage\",\r\n            storeAuthStateInCookie: true\r\n        }\r\n      });\r\n    }\r\n\r\n    componentDidMount() {\r\n      // If MSAL already has an account, the user\r\n      // is already logged in\r\n      var account = this.userAgentApplication.getAccount();\r\n\r\n      if (account) {\r\n        // Enhance user object with data from Graph\r\n        this.getUserProfile();\r\n      }\r\n    }\r\n\r\n    render() {\r\n      return <WrappedComponent\r\n        error = { this.state.error }\r\n        isAuthenticated = { this.state.isAuthenticated }\r\n        user = { this.state.user }\r\n        login = { () => this.login() }\r\n        logout = { () => this.logout() }\r\n        getAccessToken = { (scopes: string[]) => this.getAccessToken(scopes)}\r\n        setError = { (message: string, debug: string) => this.setErrorMessage(message, debug)}\r\n        {...this.props}  />;\r\n    }\r\n\r\n    async login() {\r\n      try {\r\n        // Login via popup\r\n        await this.userAgentApplication.loginPopup(\r\n            {\r\n              authority:config.authority,\r\n              scopes: config.scopes,\r\n              prompt: \"select_account\"\r\n          });\r\n        // After login, get the user's profile\r\n        await this.getUserProfile();\r\n      }\r\n      catch(err) {\r\n        this.setState({\r\n          isAuthenticated: false,\r\n          user: {},\r\n          error: this.normalizeError(err)\r\n        });\r\n      }\r\n    }\r\n\r\n    logout() {\r\n      this.userAgentApplication.logout();\r\n    }\r\n\r\n    async getAccessToken(scopes: string[]): Promise<string> {\r\n      try {\r\n        // Get the access token silently\r\n        // If the cache contains a non-expired token, this function\r\n        // will just return the cached token. Otherwise, it will\r\n        // make a request to the Azure OAuth endpoint to get a token\r\n        var silentResult = await this.userAgentApplication.acquireTokenSilent({\r\n          scopes: scopes\r\n        });\r\n\r\n        return silentResult.accessToken;\r\n      } catch (err) {\r\n        // If a silent request fails, it may be because the user needs\r\n        // to login or grant consent to one or more of the requested scopes\r\n        if (this.isInteractionRequired(err)) {\r\n          var interactiveResult = await this.userAgentApplication.acquireTokenPopup({\r\n            scopes: scopes\r\n          });\r\n\r\n          return interactiveResult.accessToken;\r\n        } else {\r\n          throw err;\r\n        }\r\n      }\r\n    }\r\n\r\n    async getUserProfile() {\r\n        try {\r\n          var accessToken = await this.getAccessToken(config.scopes);\r\n      \r\n          if (accessToken) {\r\n            // Get the user's profile from Graph\r\n            var user = await getUserDetails(accessToken);\r\n            this.setState({\r\n              isAuthenticated: true,\r\n              user: {\r\n                displayName: user.displayName,\r\n                email: user.mail || user.userPrincipalName\r\n              },\r\n              error: null\r\n            });\r\n          }\r\n        }\r\n        catch(err) {\r\n          this.setState({\r\n            isAuthenticated: false,\r\n            user: {},\r\n            error: this.normalizeError(err)\r\n          });\r\n        }\r\n      }\r\n\r\n    setErrorMessage(message: string, debug: string) {\r\n      this.setState({\r\n        error: {message: message, debug: debug}\r\n      });\r\n    }\r\n\r\n    normalizeError(error: string | Error): any {\r\n      var normalizedError = {};\r\n      if (typeof(error) === 'string') {\r\n        var errParts = error.split('|');\r\n        normalizedError = errParts.length > 1 ?\r\n          { message: errParts[1], debug: errParts[0] } :\r\n          { message: error };\r\n      } else {\r\n        normalizedError = {\r\n          message: error.message,\r\n          debug: JSON.stringify(error)\r\n        };\r\n      }\r\n      return normalizedError;\r\n    }\r\n\r\n    isInteractionRequired(error: Error): boolean {\r\n      if (!error.message || error.message.length <= 0) {\r\n        return false;\r\n      }\r\n\r\n      return (\r\n        error.message.indexOf('consent_required') > -1 ||\r\n        error.message.indexOf('interaction_required') > -1 ||\r\n        error.message.indexOf('login_required') > -1\r\n      );\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}