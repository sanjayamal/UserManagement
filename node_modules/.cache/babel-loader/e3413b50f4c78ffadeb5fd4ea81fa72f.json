{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { ClientConfigurationErrorMessage } from \"../error/ClientConfigurationError\";\nimport { XhrClient } from \"../XHRClient\";\nimport { UrlUtils } from \"../utils/UrlUtils\";\n/**\n * @hidden\n */\n\nexport var AuthorityType;\n\n(function (AuthorityType) {\n  AuthorityType[AuthorityType[\"Aad\"] = 0] = \"Aad\";\n  AuthorityType[AuthorityType[\"Adfs\"] = 1] = \"Adfs\";\n  AuthorityType[AuthorityType[\"B2C\"] = 2] = \"B2C\";\n})(AuthorityType || (AuthorityType = {}));\n/**\n * @hidden\n */\n\n\nvar Authority =\n/** @class */\nfunction () {\n  function Authority(authority, validateAuthority) {\n    this.IsValidationEnabled = validateAuthority;\n    this.CanonicalAuthority = authority;\n    this.validateAsUri();\n  }\n\n  Object.defineProperty(Authority.prototype, \"Tenant\", {\n    get: function () {\n      return this.CanonicalAuthorityUrlComponents.PathSegments[0];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"AuthorizationEndpoint\", {\n    get: function () {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.AuthorizationEndpoint.replace(\"{tenant}\", this.Tenant);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"EndSessionEndpoint\", {\n    get: function () {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.EndSessionEndpoint.replace(\"{tenant}\", this.Tenant);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"SelfSignedJwtAudience\", {\n    get: function () {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.Issuer.replace(\"{tenant}\", this.Tenant);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Authority.prototype.validateResolved = function () {\n    if (!this.tenantDiscoveryResponse) {\n      throw \"Please call ResolveEndpointsAsync first\";\n    }\n  };\n\n  Object.defineProperty(Authority.prototype, \"CanonicalAuthority\", {\n    /**\n     * A URL that is the authority set by the developer\n     */\n    get: function () {\n      return this.canonicalAuthority;\n    },\n    set: function (url) {\n      this.canonicalAuthority = UrlUtils.CanonicalizeUri(url);\n      this.canonicalAuthorityUrlComponents = null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"CanonicalAuthorityUrlComponents\", {\n    get: function () {\n      if (!this.canonicalAuthorityUrlComponents) {\n        this.canonicalAuthorityUrlComponents = UrlUtils.GetUrlComponents(this.CanonicalAuthority);\n      }\n\n      return this.canonicalAuthorityUrlComponents;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"DefaultOpenIdConfigurationEndpoint\", {\n    /**\n     * // http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\n     */\n    get: function () {\n      return this.CanonicalAuthority + \"v2.0/.well-known/openid-configuration\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Given a string, validate that it is of the form https://domain/path\n   */\n\n  Authority.prototype.validateAsUri = function () {\n    var components;\n\n    try {\n      components = this.CanonicalAuthorityUrlComponents;\n    } catch (e) {\n      throw ClientConfigurationErrorMessage.invalidAuthorityType;\n    }\n\n    if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n      throw ClientConfigurationErrorMessage.authorityUriInsecure;\n    }\n\n    if (!components.PathSegments || components.PathSegments.length < 1) {\n      throw ClientConfigurationErrorMessage.authorityUriInvalidPath;\n    }\n  };\n  /**\n   * Calls the OIDC endpoint and returns the response\n   */\n\n\n  Authority.prototype.DiscoverEndpoints = function (openIdConfigurationEndpoint) {\n    var client = new XhrClient();\n    return client.sendRequestAsync(openIdConfigurationEndpoint, \"GET\",\n    /* enableCaching: */\n    true).then(function (response) {\n      return {\n        AuthorizationEndpoint: response.authorization_endpoint,\n        EndSessionEndpoint: response.end_session_endpoint,\n        Issuer: response.issuer\n      };\n    });\n  };\n  /**\n   * Returns a promise.\n   * Checks to see if the authority is in the cache\n   * Discover endpoints via openid-configuration\n   * If successful, caches the endpoint for later use in OIDC\n   */\n\n\n  Authority.prototype.resolveEndpointsAsync = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var openIdConfigurationEndpointResponse, _a;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.GetOpenIdConfigurationEndpointAsync()];\n\n          case 1:\n            openIdConfigurationEndpointResponse = _b.sent();\n            _a = this;\n            return [4\n            /*yield*/\n            , this.DiscoverEndpoints(openIdConfigurationEndpointResponse)];\n\n          case 2:\n            _a.tenantDiscoveryResponse = _b.sent();\n            return [2\n            /*return*/\n            , this];\n        }\n      });\n    });\n  };\n\n  return Authority;\n}();\n\nexport { Authority };","map":{"version":3,"sources":["../../src/authority/Authority.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { ClientConfigurationErrorMessage } from \"../error/ClientConfigurationError\";\nimport { XhrClient } from \"../XHRClient\";\nimport { UrlUtils } from \"../utils/UrlUtils\";\n/**\n * @hidden\n */\nexport var AuthorityType;\n(function (AuthorityType) {\n    AuthorityType[AuthorityType[\"Aad\"] = 0] = \"Aad\";\n    AuthorityType[AuthorityType[\"Adfs\"] = 1] = \"Adfs\";\n    AuthorityType[AuthorityType[\"B2C\"] = 2] = \"B2C\";\n})(AuthorityType || (AuthorityType = {}));\n/**\n * @hidden\n */\nvar Authority = /** @class */ (function () {\n    function Authority(authority, validateAuthority) {\n        this.IsValidationEnabled = validateAuthority;\n        this.CanonicalAuthority = authority;\n        this.validateAsUri();\n    }\n    Object.defineProperty(Authority.prototype, \"Tenant\", {\n        get: function () {\n            return this.CanonicalAuthorityUrlComponents.PathSegments[0];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Authority.prototype, \"AuthorizationEndpoint\", {\n        get: function () {\n            this.validateResolved();\n            return this.tenantDiscoveryResponse.AuthorizationEndpoint.replace(\"{tenant}\", this.Tenant);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Authority.prototype, \"EndSessionEndpoint\", {\n        get: function () {\n            this.validateResolved();\n            return this.tenantDiscoveryResponse.EndSessionEndpoint.replace(\"{tenant}\", this.Tenant);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Authority.prototype, \"SelfSignedJwtAudience\", {\n        get: function () {\n            this.validateResolved();\n            return this.tenantDiscoveryResponse.Issuer.replace(\"{tenant}\", this.Tenant);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Authority.prototype.validateResolved = function () {\n        if (!this.tenantDiscoveryResponse) {\n            throw \"Please call ResolveEndpointsAsync first\";\n        }\n    };\n    Object.defineProperty(Authority.prototype, \"CanonicalAuthority\", {\n        /**\n         * A URL that is the authority set by the developer\n         */\n        get: function () {\n            return this.canonicalAuthority;\n        },\n        set: function (url) {\n            this.canonicalAuthority = UrlUtils.CanonicalizeUri(url);\n            this.canonicalAuthorityUrlComponents = null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Authority.prototype, \"CanonicalAuthorityUrlComponents\", {\n        get: function () {\n            if (!this.canonicalAuthorityUrlComponents) {\n                this.canonicalAuthorityUrlComponents = UrlUtils.GetUrlComponents(this.CanonicalAuthority);\n            }\n            return this.canonicalAuthorityUrlComponents;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Authority.prototype, \"DefaultOpenIdConfigurationEndpoint\", {\n        /**\n         * // http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\n         */\n        get: function () {\n            return this.CanonicalAuthority + \"v2.0/.well-known/openid-configuration\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Given a string, validate that it is of the form https://domain/path\n     */\n    Authority.prototype.validateAsUri = function () {\n        var components;\n        try {\n            components = this.CanonicalAuthorityUrlComponents;\n        }\n        catch (e) {\n            throw ClientConfigurationErrorMessage.invalidAuthorityType;\n        }\n        if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n            throw ClientConfigurationErrorMessage.authorityUriInsecure;\n        }\n        if (!components.PathSegments || components.PathSegments.length < 1) {\n            throw ClientConfigurationErrorMessage.authorityUriInvalidPath;\n        }\n    };\n    /**\n     * Calls the OIDC endpoint and returns the response\n     */\n    Authority.prototype.DiscoverEndpoints = function (openIdConfigurationEndpoint) {\n        var client = new XhrClient();\n        return client.sendRequestAsync(openIdConfigurationEndpoint, \"GET\", /* enableCaching: */ true)\n            .then(function (response) {\n            return {\n                AuthorizationEndpoint: response.authorization_endpoint,\n                EndSessionEndpoint: response.end_session_endpoint,\n                Issuer: response.issuer\n            };\n        });\n    };\n    /**\n     * Returns a promise.\n     * Checks to see if the authority is in the cache\n     * Discover endpoints via openid-configuration\n     * If successful, caches the endpoint for later use in OIDC\n     */\n    Authority.prototype.resolveEndpointsAsync = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var openIdConfigurationEndpointResponse, _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.GetOpenIdConfigurationEndpointAsync()];\n                    case 1:\n                        openIdConfigurationEndpointResponse = _b.sent();\n                        _a = this;\n                        return [4 /*yield*/, this.DiscoverEndpoints(openIdConfigurationEndpointResponse)];\n                    case 2:\n                        _a.tenantDiscoveryResponse = _b.sent();\n                        return [2 /*return*/, this];\n                }\n            });\n        });\n    };\n    return Authority;\n}());\nexport { Authority };\n//# sourceMappingURL=Authority.js.map"]},"metadata":{},"sourceType":"module"}