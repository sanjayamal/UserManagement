{"ast":null,"code":"import { ClientAuthError } from \"../error/ClientAuthError\";\nimport { UrlUtils } from \"./UrlUtils\";\nimport { TemporaryCacheKeys, Constants } from \"../utils/Constants\";\n\nvar WindowUtils =\n/** @class */\nfunction () {\n  function WindowUtils() {}\n  /**\n   * @hidden\n   * Checks if the current page is running in an iframe.\n   * @ignore\n   */\n\n\n  WindowUtils.isInIframe = function () {\n    return window.parent !== window;\n  };\n  /**\n   * @hidden\n   * Check if the current page is running in a popup.\n   * @ignore\n   */\n\n\n  WindowUtils.isInPopup = function () {\n    return !!(window.opener && window.opener !== window);\n  };\n  /**\n   * @hidden\n   * Monitors a window until it loads a url with a hash\n   * @ignore\n   */\n\n\n  WindowUtils.monitorWindowForHash = function (contentWindow, timeout, urlNavigate) {\n    return new Promise(function (resolve, reject) {\n      var maxTicks = timeout / WindowUtils.POLLING_INTERVAL_MS;\n      var ticks = 0;\n      var intervalId = setInterval(function () {\n        if (contentWindow.closed) {\n          clearInterval(intervalId);\n          reject(ClientAuthError.createUserCancelledError());\n          return;\n        }\n\n        var href;\n\n        try {\n          /*\n           * Will throw if cross origin,\n           * which should be caught and ignored\n           * since we need the interval to keep running while on STS UI.\n           */\n          href = contentWindow.location.href;\n        } catch (e) {} // Don't process blank pages or cross domain\n\n\n        if (!href || href === \"about:blank\") {\n          return;\n        } // Only run clock when we are on same domain\n\n\n        ticks++;\n\n        if (UrlUtils.urlContainsHash(href)) {\n          clearInterval(intervalId);\n          resolve(contentWindow.location.hash);\n        } else if (ticks > maxTicks) {\n          clearInterval(intervalId);\n          reject(ClientAuthError.createTokenRenewalTimeoutError(urlNavigate)); // better error?\n        }\n      }, WindowUtils.POLLING_INTERVAL_MS);\n    });\n  };\n  /**\n   * @hidden\n   * Loads iframe with authorization endpoint URL\n   * @ignore\n   */\n\n\n  WindowUtils.loadFrame = function (urlNavigate, frameName, timeoutMs, logger) {\n    /*\n     * This trick overcomes iframe navigation in IE\n     * IE does not load the page consistently in iframe\n     */\n    logger.info(\"LoadFrame: \" + frameName);\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        var frameHandle = WindowUtils.addHiddenIFrame(frameName, logger);\n\n        if (!frameHandle) {\n          reject(\"Unable to load iframe with name: \" + frameName);\n          return;\n        }\n\n        if (frameHandle.src === \"\" || frameHandle.src === \"about:blank\") {\n          frameHandle.src = urlNavigate;\n          logger.infoPii(\"Frame Name : \" + frameName + \" Navigated to: \" + urlNavigate);\n        }\n\n        resolve(frameHandle);\n      }, timeoutMs);\n    });\n  };\n  /**\n   * @hidden\n   * Adds the hidden iframe for silent token renewal.\n   * @ignore\n   */\n\n\n  WindowUtils.addHiddenIFrame = function (iframeId, logger) {\n    if (typeof iframeId === \"undefined\") {\n      return null;\n    }\n\n    logger.info(\"Add msal frame to document:\" + iframeId);\n    var adalFrame = document.getElementById(iframeId);\n\n    if (!adalFrame) {\n      if (document.createElement && document.documentElement && window.navigator.userAgent.indexOf(\"MSIE 5.0\") === -1) {\n        var ifr = document.createElement(\"iframe\");\n        ifr.setAttribute(\"id\", iframeId);\n        ifr.style.visibility = \"hidden\";\n        ifr.style.position = \"absolute\";\n        ifr.style.width = ifr.style.height = \"0\";\n        ifr.style.border = \"0\";\n        ifr.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\n        adalFrame = document.getElementsByTagName(\"body\")[0].appendChild(ifr);\n      } else if (document.body && document.body.insertAdjacentHTML) {\n        document.body.insertAdjacentHTML(\"beforeend\", \"<iframe name='\" + iframeId + \"' id='\" + iframeId + \"' style='display:none'></iframe>\");\n      }\n\n      if (window.frames && window.frames[iframeId]) {\n        adalFrame = window.frames[iframeId];\n      }\n    }\n\n    return adalFrame;\n  };\n  /**\n   * @hidden\n   * Removes a hidden iframe from the page.\n   * @ignore\n   */\n\n\n  WindowUtils.removeHiddenIframe = function (iframe) {\n    if (document.body !== iframe.parentNode) {\n      document.body.removeChild(iframe);\n    }\n  };\n  /**\n   * @hidden\n   * Find and return the iframe element with the given hash\n   * @ignore\n   */\n\n\n  WindowUtils.getIframeWithHash = function (hash) {\n    var iframes = document.getElementsByTagName(\"iframe\");\n    var iframeArray = Array.apply(null, Array(iframes.length)).map(function (iframe, index) {\n      return iframes.item(index);\n    }); // eslint-disable-line prefer-spread\n\n    return iframeArray.filter(function (iframe) {\n      try {\n        return iframe.contentWindow.location.hash === hash;\n      } catch (e) {\n        return false;\n      }\n    })[0];\n  };\n  /**\n   * @hidden\n   * Returns an array of all the popups opened by MSAL\n   * @ignore\n   */\n\n\n  WindowUtils.getPopups = function () {\n    if (!window.openedWindows) {\n      window.openedWindows = [];\n    }\n\n    return window.openedWindows;\n  };\n  /**\n   * @hidden\n   * Find and return the popup with the given hash\n   * @ignore\n   */\n\n\n  WindowUtils.getPopUpWithHash = function (hash) {\n    return WindowUtils.getPopups().filter(function (popup) {\n      try {\n        return popup.location.hash === hash;\n      } catch (e) {\n        return false;\n      }\n    })[0];\n  };\n  /**\n   * @hidden\n   * Add the popup to the known list of popups\n   * @ignore\n   */\n\n\n  WindowUtils.trackPopup = function (popup) {\n    WindowUtils.getPopups().push(popup);\n  };\n  /**\n   * @hidden\n   * Close all popups\n   * @ignore\n   */\n\n\n  WindowUtils.closePopups = function () {\n    WindowUtils.getPopups().forEach(function (popup) {\n      return popup.close();\n    });\n  };\n  /**\n   * @ignore\n   *\n   * blocks any login/acquireToken calls to reload from within a hidden iframe (generated for silent calls)\n   */\n\n\n  WindowUtils.blockReloadInHiddenIframes = function () {\n    // return an error if called from the hidden iframe created by the msal js silent calls\n    if (UrlUtils.urlContainsHash(window.location.hash) && WindowUtils.isInIframe()) {\n      throw ClientAuthError.createBlockTokenRequestsInHiddenIframeError();\n    }\n  };\n  /**\n   *\n   * @param cacheStorage\n   */\n\n\n  WindowUtils.checkIfBackButtonIsPressed = function (cacheStorage) {\n    var redirectCache = cacheStorage.getItem(TemporaryCacheKeys.REDIRECT_REQUEST); // if redirect request is set and there is no hash\n\n    if (redirectCache && !UrlUtils.urlContainsHash(window.location.hash)) {\n      var splitCache = redirectCache.split(Constants.resourceDelimiter);\n      var state = splitCache.length > 1 ? splitCache[splitCache.length - 1] : null;\n      cacheStorage.resetTempCacheItems(state);\n    }\n  };\n  /**\n   * @hidden\n   * Interval in milliseconds that we poll a window\n   * @ignore\n   */\n\n\n  WindowUtils.POLLING_INTERVAL_MS = 50;\n  return WindowUtils;\n}();\n\nexport { WindowUtils };","map":{"version":3,"sources":["../../src/utils/WindowUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { ClientAuthError } from \"../error/ClientAuthError\";\nimport { UrlUtils } from \"./UrlUtils\";\nimport { TemporaryCacheKeys, Constants } from \"../utils/Constants\";\nvar WindowUtils = /** @class */ (function () {\n    function WindowUtils() {\n    }\n    /**\n     * @hidden\n     * Checks if the current page is running in an iframe.\n     * @ignore\n     */\n    WindowUtils.isInIframe = function () {\n        return window.parent !== window;\n    };\n    /**\n     * @hidden\n     * Check if the current page is running in a popup.\n     * @ignore\n     */\n    WindowUtils.isInPopup = function () {\n        return !!(window.opener && window.opener !== window);\n    };\n    /**\n     * @hidden\n     * Monitors a window until it loads a url with a hash\n     * @ignore\n     */\n    WindowUtils.monitorWindowForHash = function (contentWindow, timeout, urlNavigate) {\n        return new Promise(function (resolve, reject) {\n            var maxTicks = timeout / WindowUtils.POLLING_INTERVAL_MS;\n            var ticks = 0;\n            var intervalId = setInterval(function () {\n                if (contentWindow.closed) {\n                    clearInterval(intervalId);\n                    reject(ClientAuthError.createUserCancelledError());\n                    return;\n                }\n                var href;\n                try {\n                    /*\n                     * Will throw if cross origin,\n                     * which should be caught and ignored\n                     * since we need the interval to keep running while on STS UI.\n                     */\n                    href = contentWindow.location.href;\n                }\n                catch (e) { }\n                // Don't process blank pages or cross domain\n                if (!href || href === \"about:blank\") {\n                    return;\n                }\n                // Only run clock when we are on same domain\n                ticks++;\n                if (UrlUtils.urlContainsHash(href)) {\n                    clearInterval(intervalId);\n                    resolve(contentWindow.location.hash);\n                }\n                else if (ticks > maxTicks) {\n                    clearInterval(intervalId);\n                    reject(ClientAuthError.createTokenRenewalTimeoutError(urlNavigate)); // better error?\n                }\n            }, WindowUtils.POLLING_INTERVAL_MS);\n        });\n    };\n    /**\n     * @hidden\n     * Loads iframe with authorization endpoint URL\n     * @ignore\n     */\n    WindowUtils.loadFrame = function (urlNavigate, frameName, timeoutMs, logger) {\n        /*\n         * This trick overcomes iframe navigation in IE\n         * IE does not load the page consistently in iframe\n         */\n        logger.info(\"LoadFrame: \" + frameName);\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                var frameHandle = WindowUtils.addHiddenIFrame(frameName, logger);\n                if (!frameHandle) {\n                    reject(\"Unable to load iframe with name: \" + frameName);\n                    return;\n                }\n                if (frameHandle.src === \"\" || frameHandle.src === \"about:blank\") {\n                    frameHandle.src = urlNavigate;\n                    logger.infoPii(\"Frame Name : \" + frameName + \" Navigated to: \" + urlNavigate);\n                }\n                resolve(frameHandle);\n            }, timeoutMs);\n        });\n    };\n    /**\n     * @hidden\n     * Adds the hidden iframe for silent token renewal.\n     * @ignore\n     */\n    WindowUtils.addHiddenIFrame = function (iframeId, logger) {\n        if (typeof iframeId === \"undefined\") {\n            return null;\n        }\n        logger.info(\"Add msal frame to document:\" + iframeId);\n        var adalFrame = document.getElementById(iframeId);\n        if (!adalFrame) {\n            if (document.createElement &&\n                document.documentElement &&\n                (window.navigator.userAgent.indexOf(\"MSIE 5.0\") === -1)) {\n                var ifr = document.createElement(\"iframe\");\n                ifr.setAttribute(\"id\", iframeId);\n                ifr.style.visibility = \"hidden\";\n                ifr.style.position = \"absolute\";\n                ifr.style.width = ifr.style.height = \"0\";\n                ifr.style.border = \"0\";\n                ifr.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\n                adalFrame = document.getElementsByTagName(\"body\")[0].appendChild(ifr);\n            }\n            else if (document.body && document.body.insertAdjacentHTML) {\n                document.body.insertAdjacentHTML(\"beforeend\", \"<iframe name='\" + iframeId + \"' id='\" + iframeId + \"' style='display:none'></iframe>\");\n            }\n            if (window.frames && window.frames[iframeId]) {\n                adalFrame = window.frames[iframeId];\n            }\n        }\n        return adalFrame;\n    };\n    /**\n     * @hidden\n     * Removes a hidden iframe from the page.\n     * @ignore\n     */\n    WindowUtils.removeHiddenIframe = function (iframe) {\n        if (document.body !== iframe.parentNode) {\n            document.body.removeChild(iframe);\n        }\n    };\n    /**\n     * @hidden\n     * Find and return the iframe element with the given hash\n     * @ignore\n     */\n    WindowUtils.getIframeWithHash = function (hash) {\n        var iframes = document.getElementsByTagName(\"iframe\");\n        var iframeArray = Array.apply(null, Array(iframes.length)).map(function (iframe, index) { return iframes.item(index); }); // eslint-disable-line prefer-spread\n        return iframeArray.filter(function (iframe) {\n            try {\n                return iframe.contentWindow.location.hash === hash;\n            }\n            catch (e) {\n                return false;\n            }\n        })[0];\n    };\n    /**\n     * @hidden\n     * Returns an array of all the popups opened by MSAL\n     * @ignore\n     */\n    WindowUtils.getPopups = function () {\n        if (!window.openedWindows) {\n            window.openedWindows = [];\n        }\n        return window.openedWindows;\n    };\n    /**\n     * @hidden\n     * Find and return the popup with the given hash\n     * @ignore\n     */\n    WindowUtils.getPopUpWithHash = function (hash) {\n        return WindowUtils.getPopups().filter(function (popup) {\n            try {\n                return popup.location.hash === hash;\n            }\n            catch (e) {\n                return false;\n            }\n        })[0];\n    };\n    /**\n     * @hidden\n     * Add the popup to the known list of popups\n     * @ignore\n     */\n    WindowUtils.trackPopup = function (popup) {\n        WindowUtils.getPopups().push(popup);\n    };\n    /**\n     * @hidden\n     * Close all popups\n     * @ignore\n     */\n    WindowUtils.closePopups = function () {\n        WindowUtils.getPopups().forEach(function (popup) { return popup.close(); });\n    };\n    /**\n     * @ignore\n     *\n     * blocks any login/acquireToken calls to reload from within a hidden iframe (generated for silent calls)\n     */\n    WindowUtils.blockReloadInHiddenIframes = function () {\n        // return an error if called from the hidden iframe created by the msal js silent calls\n        if (UrlUtils.urlContainsHash(window.location.hash) && WindowUtils.isInIframe()) {\n            throw ClientAuthError.createBlockTokenRequestsInHiddenIframeError();\n        }\n    };\n    /**\n     *\n     * @param cacheStorage\n     */\n    WindowUtils.checkIfBackButtonIsPressed = function (cacheStorage) {\n        var redirectCache = cacheStorage.getItem(TemporaryCacheKeys.REDIRECT_REQUEST);\n        // if redirect request is set and there is no hash\n        if (redirectCache && !UrlUtils.urlContainsHash(window.location.hash)) {\n            var splitCache = redirectCache.split(Constants.resourceDelimiter);\n            var state = splitCache.length > 1 ? splitCache[splitCache.length - 1] : null;\n            cacheStorage.resetTempCacheItems(state);\n        }\n    };\n    /**\n     * @hidden\n     * Interval in milliseconds that we poll a window\n     * @ignore\n     */\n    WindowUtils.POLLING_INTERVAL_MS = 50;\n    return WindowUtils;\n}());\nexport { WindowUtils };\n//# sourceMappingURL=WindowUtils.js.map"]},"metadata":{},"sourceType":"module"}