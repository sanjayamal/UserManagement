{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nimport * as tslib_1 from \"tslib\";\nimport { PACKAGE_VERSION } from \"../Version\";\nimport { MiddlewareControl } from \"./MiddlewareControl\";\nimport { appendRequestHeader, generateUUID, getRequestHeader, setRequestHeader } from \"./MiddlewareUtil\";\nimport { TelemetryHandlerOptions } from \"./options/TelemetryHandlerOptions\";\n/**\r\n * @class\r\n * @implements Middleware\r\n * Class for TelemetryHandler\r\n */\n\nexport class TelemetryHandler {\n  /**\r\n   * @public\r\n   * @async\r\n   * To execute the current middleware\r\n   * @param {Context} context - The context object of the request\r\n   * @returns A Promise that resolves to nothing\r\n   */\n  execute(context) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      try {\n        let clientRequestId = getRequestHeader(context.request, context.options, TelemetryHandler.CLIENT_REQUEST_ID_HEADER);\n\n        if (clientRequestId === null) {\n          clientRequestId = generateUUID();\n          setRequestHeader(context.request, context.options, TelemetryHandler.CLIENT_REQUEST_ID_HEADER, clientRequestId);\n        }\n\n        let sdkVersionValue = `${TelemetryHandler.PRODUCT_NAME}/${PACKAGE_VERSION}`;\n        let options;\n\n        if (context.middlewareControl instanceof MiddlewareControl) {\n          options = context.middlewareControl.getMiddlewareOptions(TelemetryHandlerOptions);\n        }\n\n        if (typeof options !== \"undefined\") {\n          const featureUsage = options.getFeatureUsage();\n          sdkVersionValue += ` (${TelemetryHandler.FEATURE_USAGE_STRING}=${featureUsage})`;\n        }\n\n        appendRequestHeader(context.request, context.options, TelemetryHandler.SDK_VERSION_HEADER, sdkVersionValue);\n        return yield this.nextMiddleware.execute(context);\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * To set the next middleware in the chain\r\n   * @param {Middleware} next - The middleware instance\r\n   * @returns Nothing\r\n   */\n\n\n  setNext(next) {\n    this.nextMiddleware = next;\n  }\n\n}\n/**\r\n * @private\r\n * @static\r\n * A member holding the name of the client request id header\r\n */\n\nTelemetryHandler.CLIENT_REQUEST_ID_HEADER = \"client-request-id\";\n/**\r\n * @private\r\n * @static\r\n * A member holding the name of the sdk version header\r\n */\n\nTelemetryHandler.SDK_VERSION_HEADER = \"SdkVersion\";\n/**\r\n * @private\r\n * @static\r\n * A member holding the language prefix for the sdk version header value\r\n */\n\nTelemetryHandler.PRODUCT_NAME = \"graph-js\";\n/**\r\n * @private\r\n * @static\r\n * A member holding the key for the feature usage metrics\r\n */\n\nTelemetryHandler.FEATURE_USAGE_STRING = \"featureUsage\";","map":{"version":3,"sources":["../../../src/middleware/TelemetryHandler.ts"],"names":[],"mappings":"AAAA;;;;;;;AAYA,SAAS,eAAT,QAAgC,YAAhC;AAGA,SAAS,iBAAT,QAAkC,qBAAlC;AACA,SAAS,mBAAT,EAA8B,YAA9B,EAA4C,gBAA5C,EAA8D,gBAA9D,QAAsF,kBAAtF;AACA,SAAS,uBAAT,QAAwC,mCAAxC;AAEA;;;;;;AAKA,OAAM,MAAO,gBAAP,CAAuB;AAmC5B;;;;;;;AAOa,EAAA,OAAO,CAAC,OAAD,EAAiB;;AACpC,UAAI;AACH,YAAI,eAAe,GAAW,gBAAgB,CAAC,OAAO,CAAC,OAAT,EAAkB,OAAO,CAAC,OAA1B,EAAmC,gBAAgB,CAAC,wBAApD,CAA9C;;AACA,YAAI,eAAe,KAAK,IAAxB,EAA8B;AAC7B,UAAA,eAAe,GAAG,YAAY,EAA9B;AACA,UAAA,gBAAgB,CAAC,OAAO,CAAC,OAAT,EAAkB,OAAO,CAAC,OAA1B,EAAmC,gBAAgB,CAAC,wBAApD,EAA8E,eAA9E,CAAhB;AACA;;AACD,YAAI,eAAe,GAAW,GAAG,gBAAgB,CAAC,YAAY,IAAI,eAAe,EAAjF;AACA,YAAI,OAAJ;;AACA,YAAI,OAAO,CAAC,iBAAR,YAAqC,iBAAzC,EAA4D;AAC3D,UAAA,OAAO,GAAG,OAAO,CAAC,iBAAR,CAA0B,oBAA1B,CAA+C,uBAA/C,CAAV;AACA;;AACD,YAAI,OAAO,OAAP,KAAmB,WAAvB,EAAoC;AACnC,gBAAM,YAAY,GAAW,OAAO,CAAC,eAAR,EAA7B;AACA,UAAA,eAAe,IAAI,KAAK,gBAAgB,CAAC,oBAAoB,IAAI,YAAY,GAA7E;AACA;;AACD,QAAA,mBAAmB,CAAC,OAAO,CAAC,OAAT,EAAkB,OAAO,CAAC,OAA1B,EAAmC,gBAAgB,CAAC,kBAApD,EAAwE,eAAxE,CAAnB;AACA,eAAO,MAAM,KAAK,cAAL,CAAoB,OAApB,CAA4B,OAA5B,CAAb;AACA,OAjBD,CAiBE,OAAO,KAAP,EAAc;AACf,cAAM,KAAN;AACA;AACD,K;AAAA;AAED;;;;;;;;AAMO,EAAA,OAAO,CAAC,IAAD,EAAiB;AAC9B,SAAK,cAAL,GAAsB,IAAtB;AACA;;AAzE2B;AAC5B;;;;;;AAKe,gBAAA,CAAA,wBAAA,GAA2B,mBAA3B;AAEf;;;;;;AAKe,gBAAA,CAAA,kBAAA,GAAqB,YAArB;AAEf;;;;;;AAKe,gBAAA,CAAA,YAAA,GAAe,UAAf;AAEf;;;;;;AAKe,gBAAA,CAAA,oBAAA,GAAuB,cAAvB","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { PACKAGE_VERSION } from \"../Version\";\r\nimport { MiddlewareControl } from \"./MiddlewareControl\";\r\nimport { appendRequestHeader, generateUUID, getRequestHeader, setRequestHeader } from \"./MiddlewareUtil\";\r\nimport { TelemetryHandlerOptions } from \"./options/TelemetryHandlerOptions\";\r\n/**\r\n * @class\r\n * @implements Middleware\r\n * Class for TelemetryHandler\r\n */\r\nexport class TelemetryHandler {\r\n    /**\r\n     * @public\r\n     * @async\r\n     * To execute the current middleware\r\n     * @param {Context} context - The context object of the request\r\n     * @returns A Promise that resolves to nothing\r\n     */\r\n    execute(context) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                let clientRequestId = getRequestHeader(context.request, context.options, TelemetryHandler.CLIENT_REQUEST_ID_HEADER);\r\n                if (clientRequestId === null) {\r\n                    clientRequestId = generateUUID();\r\n                    setRequestHeader(context.request, context.options, TelemetryHandler.CLIENT_REQUEST_ID_HEADER, clientRequestId);\r\n                }\r\n                let sdkVersionValue = `${TelemetryHandler.PRODUCT_NAME}/${PACKAGE_VERSION}`;\r\n                let options;\r\n                if (context.middlewareControl instanceof MiddlewareControl) {\r\n                    options = context.middlewareControl.getMiddlewareOptions(TelemetryHandlerOptions);\r\n                }\r\n                if (typeof options !== \"undefined\") {\r\n                    const featureUsage = options.getFeatureUsage();\r\n                    sdkVersionValue += ` (${TelemetryHandler.FEATURE_USAGE_STRING}=${featureUsage})`;\r\n                }\r\n                appendRequestHeader(context.request, context.options, TelemetryHandler.SDK_VERSION_HEADER, sdkVersionValue);\r\n                return yield this.nextMiddleware.execute(context);\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * To set the next middleware in the chain\r\n     * @param {Middleware} next - The middleware instance\r\n     * @returns Nothing\r\n     */\r\n    setNext(next) {\r\n        this.nextMiddleware = next;\r\n    }\r\n}\r\n/**\r\n * @private\r\n * @static\r\n * A member holding the name of the client request id header\r\n */\r\nTelemetryHandler.CLIENT_REQUEST_ID_HEADER = \"client-request-id\";\r\n/**\r\n * @private\r\n * @static\r\n * A member holding the name of the sdk version header\r\n */\r\nTelemetryHandler.SDK_VERSION_HEADER = \"SdkVersion\";\r\n/**\r\n * @private\r\n * @static\r\n * A member holding the language prefix for the sdk version header value\r\n */\r\nTelemetryHandler.PRODUCT_NAME = \"graph-js\";\r\n/**\r\n * @private\r\n * @static\r\n * A member holding the key for the feature usage metrics\r\n */\r\nTelemetryHandler.FEATURE_USAGE_STRING = \"featureUsage\";\r\n//# sourceMappingURL=TelemetryHandler.js.map"]},"metadata":{},"sourceType":"module"}