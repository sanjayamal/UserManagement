{"ast":null,"code":"import { B2cAuthority } from \"../authority/B2cAuthority\";\nimport { AADTrustedHostList } from \"../utils/Constants\";\nimport { TENANT_PLACEHOLDER, EVENT_NAME_PREFIX } from \"./TelemetryConstants\";\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\nimport { UrlUtils } from \"../utils/UrlUtils\";\nexport var scrubTenantFromUri = function (uri) {\n  var url = UrlUtils.GetUrlComponents(uri); // validate trusted host\n\n  if (!AADTrustedHostList[url.HostNameAndPort.toLocaleLowerCase()]) {\n    // Should this return null or what was passed?\n    return null;\n  }\n\n  var pathParams = url.PathSegments;\n\n  if (pathParams && pathParams.length >= 2) {\n    var tenantPosition = pathParams[1] === B2cAuthority.B2C_PREFIX ? 2 : 1;\n\n    if (tenantPosition < pathParams.length) {\n      pathParams[tenantPosition] = TENANT_PLACEHOLDER;\n    }\n  }\n\n  return url.Protocol + \"//\" + url.HostNameAndPort + \"/\" + pathParams.join(\"/\");\n};\nexport var hashPersonalIdentifier = function (valueToHash) {\n  /*\n   * TODO sha256 this\n   * Current test runner is being funny with node libs that are webpacked anyway\n   * need a different solution\n   */\n  return CryptoUtils.base64Encode(valueToHash);\n};\nexport var prependEventNamePrefix = function (suffix) {\n  return \"\" + EVENT_NAME_PREFIX + (suffix || \"\");\n};","map":{"version":3,"sources":["../../src/telemetry/TelemetryUtils.ts"],"names":[],"mappings":"AAAA,SAAS,YAAT,QAA6B,2BAA7B;AACA,SAAS,kBAAT,QAAmC,oBAAnC;AACA,SAAS,kBAAT,EAA6B,iBAA7B,QAAsD,sBAAtD;AACA,SAAS,WAAT,QAA4B,sBAA5B;AACA,SAAS,QAAT,QAAyB,mBAAzB;AAEA,OAAO,IAAM,kBAAkB,GAAG,UAAC,GAAD,EAAY;AAE1C,MAAM,GAAG,GAAG,QAAQ,CAAC,gBAAT,CAA0B,GAA1B,CAAZ,CAF0C,CAI1C;;AACA,MAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,eAAJ,CAAoB,iBAApB,EAAD,CAAvB,EAAkE;AAC9D;AACA,WAAO,IAAP;AACH;;AAED,MAAM,UAAU,GAAG,GAAG,CAAC,YAAvB;;AAEA,MAAI,UAAU,IAAI,UAAU,CAAC,MAAX,IAAqB,CAAvC,EAA0C;AACtC,QAAM,cAAc,GAAG,UAAU,CAAC,CAAD,CAAV,KAAmB,YAAY,CAAC,UAAhC,GAA6C,CAA7C,GAAiD,CAAxE;;AACA,QAAI,cAAc,GAAG,UAAU,CAAC,MAAhC,EAAwC;AACpC,MAAA,UAAU,CAAC,cAAD,CAAV,GAA6B,kBAA7B;AACH;AACJ;;AAED,SAAW,GAAG,CAAC,QAAJ,GAAY,IAAZ,GAAiB,GAAG,CAAC,eAArB,GAAoC,GAApC,GAAwC,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAnD;AACH,CApBM;AAsBP,OAAO,IAAM,sBAAsB,GAAG,UAAC,WAAD,EAAoB;AACtD;;;;;AAKA,SAAO,WAAW,CAAC,YAAZ,CAAyB,WAAzB,CAAP;AACH,CAPM;AASP,OAAO,IAAM,sBAAsB,GAAG,UAAC,MAAD,EAAe;AAAa,SAAA,KAAG,iBAAH,IAAuB,MAAM,IAA7B,EAAA,CAAA;AAAqC,CAAhG","sourceRoot":"","sourcesContent":["import { B2cAuthority } from \"../authority/B2cAuthority\";\nimport { AADTrustedHostList } from \"../utils/Constants\";\nimport { TENANT_PLACEHOLDER, EVENT_NAME_PREFIX } from \"./TelemetryConstants\";\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\nimport { UrlUtils } from \"../utils/UrlUtils\";\nexport var scrubTenantFromUri = function (uri) {\n    var url = UrlUtils.GetUrlComponents(uri);\n    // validate trusted host\n    if (!AADTrustedHostList[url.HostNameAndPort.toLocaleLowerCase()]) {\n        // Should this return null or what was passed?\n        return null;\n    }\n    var pathParams = url.PathSegments;\n    if (pathParams && pathParams.length >= 2) {\n        var tenantPosition = pathParams[1] === B2cAuthority.B2C_PREFIX ? 2 : 1;\n        if (tenantPosition < pathParams.length) {\n            pathParams[tenantPosition] = TENANT_PLACEHOLDER;\n        }\n    }\n    return url.Protocol + \"//\" + url.HostNameAndPort + \"/\" + pathParams.join(\"/\");\n};\nexport var hashPersonalIdentifier = function (valueToHash) {\n    /*\n     * TODO sha256 this\n     * Current test runner is being funny with node libs that are webpacked anyway\n     * need a different solution\n     */\n    return CryptoUtils.base64Encode(valueToHash);\n};\nexport var prependEventNamePrefix = function (suffix) { return \"\" + EVENT_NAME_PREFIX + (suffix || \"\"); };\n//# sourceMappingURL=TelemetryUtils.js.map"]},"metadata":{},"sourceType":"module"}