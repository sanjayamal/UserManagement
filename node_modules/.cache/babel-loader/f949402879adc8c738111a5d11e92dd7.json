{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { ClientConfigurationError } from \"./error/ClientConfigurationError\";\n\nvar ScopeSet =\n/** @class */\nfunction () {\n  function ScopeSet() {}\n  /**\n   * Check if there are dup scopes in a given request\n   *\n   * @param cachedScopes\n   * @param scopes\n   */\n  // TODO: Rename this, intersecting scopes isn't a great name for duplicate checker\n\n\n  ScopeSet.isIntersectingScopes = function (cachedScopes, scopes) {\n    cachedScopes = this.convertToLowerCase(cachedScopes);\n\n    for (var i = 0; i < scopes.length; i++) {\n      if (cachedScopes.indexOf(scopes[i].toLowerCase()) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Check if a given scope is present in the request\n   *\n   * @param cachedScopes\n   * @param scopes\n   */\n\n\n  ScopeSet.containsScope = function (cachedScopes, scopes) {\n    cachedScopes = this.convertToLowerCase(cachedScopes);\n    return scopes.every(function (value) {\n      return cachedScopes.indexOf(value.toString().toLowerCase()) >= 0;\n    });\n  };\n  /**\n   * toLower\n   *\n   * @param scopes\n   */\n  // TODO: Rename this, too generic name for a function that only deals with scopes\n\n\n  ScopeSet.convertToLowerCase = function (scopes) {\n    return scopes.map(function (scope) {\n      return scope.toLowerCase();\n    });\n  };\n  /**\n   * remove one element from a scope array\n   *\n   * @param scopes\n   * @param scope\n   */\n  // TODO: Rename this, too generic name for a function that only deals with scopes\n\n\n  ScopeSet.removeElement = function (scopes, scope) {\n    return scopes.filter(function (value) {\n      return value !== scope;\n    });\n  };\n  /**\n   * Parse the scopes into a formatted scopeList\n   * @param scopes\n   */\n\n\n  ScopeSet.parseScope = function (scopes) {\n    var scopeList = \"\";\n\n    if (scopes) {\n      for (var i = 0; i < scopes.length; ++i) {\n        scopeList += i !== scopes.length - 1 ? scopes[i] + \" \" : scopes[i];\n      }\n    }\n\n    return scopeList;\n  };\n  /**\n   * @hidden\n   *\n   * Used to validate the scopes input parameter requested  by the developer.\n   * @param {Array<string>} scopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n   * @ignore\n   */\n\n\n  ScopeSet.validateInputScope = function (scopes, scopesRequired, clientId) {\n    if (!scopes) {\n      if (scopesRequired) {\n        throw ClientConfigurationError.createScopesRequiredError(scopes);\n      } else {\n        return;\n      }\n    } // Check that scopes is an array object (also throws error if scopes == null)\n\n\n    if (!Array.isArray(scopes)) {\n      throw ClientConfigurationError.createScopesNonArrayError(scopes);\n    } // Check that scopes is not an empty array\n\n\n    if (scopes.length < 1) {\n      throw ClientConfigurationError.createEmptyScopesArrayError(scopes.toString());\n    } // Check that clientId is passed as single scope\n\n\n    if (scopes.indexOf(clientId) > -1) {\n      if (scopes.length > 1) {\n        throw ClientConfigurationError.createClientIdSingleScopeError(scopes.toString());\n      }\n    }\n  };\n  /**\n   * @hidden\n   *\n   * Extracts scope value from the state sent with the authentication request.\n   * @param {string} state\n   * @returns {string} scope.\n   * @ignore\n   */\n\n\n  ScopeSet.getScopeFromState = function (state) {\n    if (state) {\n      var splitIndex = state.indexOf(\"|\");\n\n      if (splitIndex > -1 && splitIndex + 1 < state.length) {\n        return state.substring(splitIndex + 1);\n      }\n    }\n\n    return \"\";\n  };\n  /**\n   * @ignore\n   * Appends extraScopesToConsent if passed\n   * @param {@link AuthenticationParameters}\n   */\n\n\n  ScopeSet.appendScopes = function (reqScopes, reqExtraScopesToConsent) {\n    if (reqScopes) {\n      return reqExtraScopesToConsent ? reqScopes.concat(reqExtraScopesToConsent) : reqScopes;\n    }\n\n    return null;\n  };\n\n  return ScopeSet;\n}();\n\nexport { ScopeSet };","map":{"version":3,"sources":["../src/ScopeSet.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { ClientConfigurationError } from \"./error/ClientConfigurationError\";\nvar ScopeSet = /** @class */ (function () {\n    function ScopeSet() {\n    }\n    /**\n     * Check if there are dup scopes in a given request\n     *\n     * @param cachedScopes\n     * @param scopes\n     */\n    // TODO: Rename this, intersecting scopes isn't a great name for duplicate checker\n    ScopeSet.isIntersectingScopes = function (cachedScopes, scopes) {\n        cachedScopes = this.convertToLowerCase(cachedScopes);\n        for (var i = 0; i < scopes.length; i++) {\n            if (cachedScopes.indexOf(scopes[i].toLowerCase()) > -1) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Check if a given scope is present in the request\n     *\n     * @param cachedScopes\n     * @param scopes\n     */\n    ScopeSet.containsScope = function (cachedScopes, scopes) {\n        cachedScopes = this.convertToLowerCase(cachedScopes);\n        return scopes.every(function (value) { return cachedScopes.indexOf(value.toString().toLowerCase()) >= 0; });\n    };\n    /**\n     * toLower\n     *\n     * @param scopes\n     */\n    // TODO: Rename this, too generic name for a function that only deals with scopes\n    ScopeSet.convertToLowerCase = function (scopes) {\n        return scopes.map(function (scope) { return scope.toLowerCase(); });\n    };\n    /**\n     * remove one element from a scope array\n     *\n     * @param scopes\n     * @param scope\n     */\n    // TODO: Rename this, too generic name for a function that only deals with scopes\n    ScopeSet.removeElement = function (scopes, scope) {\n        return scopes.filter(function (value) { return value !== scope; });\n    };\n    /**\n     * Parse the scopes into a formatted scopeList\n     * @param scopes\n     */\n    ScopeSet.parseScope = function (scopes) {\n        var scopeList = \"\";\n        if (scopes) {\n            for (var i = 0; i < scopes.length; ++i) {\n                scopeList += (i !== scopes.length - 1) ? scopes[i] + \" \" : scopes[i];\n            }\n        }\n        return scopeList;\n    };\n    /**\n     * @hidden\n     *\n     * Used to validate the scopes input parameter requested  by the developer.\n     * @param {Array<string>} scopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n     * @ignore\n     */\n    ScopeSet.validateInputScope = function (scopes, scopesRequired, clientId) {\n        if (!scopes) {\n            if (scopesRequired) {\n                throw ClientConfigurationError.createScopesRequiredError(scopes);\n            }\n            else {\n                return;\n            }\n        }\n        // Check that scopes is an array object (also throws error if scopes == null)\n        if (!Array.isArray(scopes)) {\n            throw ClientConfigurationError.createScopesNonArrayError(scopes);\n        }\n        // Check that scopes is not an empty array\n        if (scopes.length < 1) {\n            throw ClientConfigurationError.createEmptyScopesArrayError(scopes.toString());\n        }\n        // Check that clientId is passed as single scope\n        if (scopes.indexOf(clientId) > -1) {\n            if (scopes.length > 1) {\n                throw ClientConfigurationError.createClientIdSingleScopeError(scopes.toString());\n            }\n        }\n    };\n    /**\n     * @hidden\n     *\n     * Extracts scope value from the state sent with the authentication request.\n     * @param {string} state\n     * @returns {string} scope.\n     * @ignore\n     */\n    ScopeSet.getScopeFromState = function (state) {\n        if (state) {\n            var splitIndex = state.indexOf(\"|\");\n            if (splitIndex > -1 && splitIndex + 1 < state.length) {\n                return state.substring(splitIndex + 1);\n            }\n        }\n        return \"\";\n    };\n    /**\n     * @ignore\n     * Appends extraScopesToConsent if passed\n     * @param {@link AuthenticationParameters}\n     */\n    ScopeSet.appendScopes = function (reqScopes, reqExtraScopesToConsent) {\n        if (reqScopes) {\n            return reqExtraScopesToConsent ? reqScopes.concat(reqExtraScopesToConsent) : reqScopes;\n        }\n        return null;\n    };\n    return ScopeSet;\n}());\nexport { ScopeSet };\n//# sourceMappingURL=ScopeSet.js.map"]},"metadata":{},"sourceType":"module"}