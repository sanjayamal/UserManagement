{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Authority, AuthorityType } from \"./Authority\";\nimport { XhrClient } from \"../XHRClient\";\nimport { AADTrustedHostList } from \"../utils/Constants\";\n/**\n * @hidden\n */\n\nvar AadAuthority =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AadAuthority, _super);\n\n  function AadAuthority(authority, validateAuthority) {\n    return _super.call(this, authority, validateAuthority) || this;\n  }\n\n  Object.defineProperty(AadAuthority.prototype, \"AadInstanceDiscoveryEndpointUrl\", {\n    get: function () {\n      return AadAuthority.AadInstanceDiscoveryEndpoint + \"?api-version=1.0&authorization_endpoint=\" + this.CanonicalAuthority + \"oauth2/v2.0/authorize\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AadAuthority.prototype, \"AuthorityType\", {\n    get: function () {\n      return AuthorityType.Aad;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns a promise which resolves to the OIDC endpoint\n   * Only responds with the endpoint\n   */\n\n  AadAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var client;\n      return tslib_1.__generator(this, function (_a) {\n        if (!this.IsValidationEnabled || this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)) {\n          return [2\n          /*return*/\n          , this.DefaultOpenIdConfigurationEndpoint];\n        }\n\n        client = new XhrClient();\n        return [2\n        /*return*/\n        , client.sendRequestAsync(this.AadInstanceDiscoveryEndpointUrl, \"GET\", true).then(function (response) {\n          return response.tenant_discovery_endpoint;\n        })];\n      });\n    });\n  };\n  /**\n   * Checks to see if the host is in a list of trusted hosts\n   * @param {string} The host to look up\n   */\n\n\n  AadAuthority.prototype.IsInTrustedHostList = function (host) {\n    return AADTrustedHostList[host.toLowerCase()];\n  };\n\n  AadAuthority.AadInstanceDiscoveryEndpoint = \"https://login.microsoftonline.com/common/discovery/instance\";\n  return AadAuthority;\n}(Authority);\n\nexport { AadAuthority };","map":{"version":3,"sources":["../../src/authority/AadAuthority.ts"],"names":[],"mappings":"AAAA;;;;;AAKA,SAAS,SAAT,EAAoB,aAApB,QAAyC,aAAzC;AACA,SAAS,SAAT,QAA0B,cAA1B;AACA,SAAS,kBAAT,QAAmC,oBAAnC;AAEA;;;;AAGA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,EAAA,MAAA;;AAO9B,WAAA,YAAA,CAAmB,SAAnB,EAAsC,iBAAtC,EAAgE;WAC5D,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAN,EAAiB,iBAAjB,KAAmC,I;AACtC;;AAND,EAAA,MAAA,CAAA,cAAA,CAAY,YAAA,CAAA,SAAZ,EAAY,iCAAZ,EAA2C;SAA3C,YAAA;AACI,aAAU,YAAY,CAAC,4BAAb,GAAyC,0CAAzC,GAAoF,KAAK,kBAAzF,GAA2G,uBAArH;AACH,KAF0C;oBAAA;;AAAA,GAA3C;AAQA,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,eAAX,EAAwB;SAAxB,YAAA;AACI,aAAO,aAAa,CAAC,GAArB;AACH,KAFuB;oBAAA;;AAAA,GAAxB;AAIA;;;;;AAIa,EAAA,YAAA,CAAA,SAAA,CAAA,mCAAA,GAAb,YAAA;;;;AACI,YAAI,CAAC,KAAK,mBAAN,IAA6B,KAAK,mBAAL,CAAyB,KAAK,+BAAL,CAAqC,eAA9D,CAAjC,EAAiH;AAC7G,iBAAA,CAAA;AAAA;AAAA,YAAO,KAAK,kCAAZ,CAAA;AACH;;AAGK,QAAA,MAAM,GAAc,IAAI,SAAJ,EAApB;AAEN,eAAA,CAAA;AAAA;AAAA,UAAO,MAAM,CAAC,gBAAP,CAAwB,KAAK,+BAA7B,EAA8D,KAA9D,EAAqE,IAArE,EACF,IADE,CACG,UAAC,QAAD,EAAS;AACX,iBAAO,QAAQ,CAAC,yBAAhB;AACH,SAHE,CAAP,CAAA;;;AAIH,GAZY;AAcb;;;;;;AAIO,EAAA,YAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,IAA3B,EAAuC;AACnC,WAAO,kBAAkB,CAAC,IAAI,CAAC,WAAL,EAAD,CAAzB;AACH,GAFM;;AApCiB,EAAA,YAAA,CAAA,4BAAA,GAAuC,6DAAvC;AAuC5B,SAAA,YAAA;AAAC,CAxCD,CAAkC,SAAlC,CAAA;;SAAa,Y","sourceRoot":"","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Authority, AuthorityType } from \"./Authority\";\nimport { XhrClient } from \"../XHRClient\";\nimport { AADTrustedHostList } from \"../utils/Constants\";\n/**\n * @hidden\n */\nvar AadAuthority = /** @class */ (function (_super) {\n    tslib_1.__extends(AadAuthority, _super);\n    function AadAuthority(authority, validateAuthority) {\n        return _super.call(this, authority, validateAuthority) || this;\n    }\n    Object.defineProperty(AadAuthority.prototype, \"AadInstanceDiscoveryEndpointUrl\", {\n        get: function () {\n            return AadAuthority.AadInstanceDiscoveryEndpoint + \"?api-version=1.0&authorization_endpoint=\" + this.CanonicalAuthority + \"oauth2/v2.0/authorize\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AadAuthority.prototype, \"AuthorityType\", {\n        get: function () {\n            return AuthorityType.Aad;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns a promise which resolves to the OIDC endpoint\n     * Only responds with the endpoint\n     */\n    AadAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var client;\n            return tslib_1.__generator(this, function (_a) {\n                if (!this.IsValidationEnabled || this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)) {\n                    return [2 /*return*/, this.DefaultOpenIdConfigurationEndpoint];\n                }\n                client = new XhrClient();\n                return [2 /*return*/, client.sendRequestAsync(this.AadInstanceDiscoveryEndpointUrl, \"GET\", true)\n                        .then(function (response) {\n                        return response.tenant_discovery_endpoint;\n                    })];\n            });\n        });\n    };\n    /**\n     * Checks to see if the host is in a list of trusted hosts\n     * @param {string} The host to look up\n     */\n    AadAuthority.prototype.IsInTrustedHostList = function (host) {\n        return AADTrustedHostList[host.toLowerCase()];\n    };\n    AadAuthority.AadInstanceDiscoveryEndpoint = \"https://login.microsoftonline.com/common/discovery/instance\";\n    return AadAuthority;\n}(Authority));\nexport { AadAuthority };\n//# sourceMappingURL=AadAuthority.js.map"]},"metadata":{},"sourceType":"module"}