{"ast":null,"code":"var _jsxFileName = \"D:\\\\Assignment\\\\graph-tutorial\\\\src\\\\Calendar.tsx\";\nimport React from 'react';\nimport moment from 'moment';\nimport { config } from './Config';\nimport { getEvents } from './GraphService';\nimport withAuthProvider from './AuthProvider';\n\n// Helper function to format Graph date/time\nfunction formatDateTime(dateTime) {\n  if (dateTime !== undefined) {\n    return moment.utc(dateTime).local().format('M/D/YY h:mm A');\n  }\n}\n\nclass Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: []\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      // Get the user's access token\n      var accessToken = await this.props.getAccessToken(config.scopes); // Get the user's events\n\n      var events = await getEvents(accessToken); // Update the array of events in state\n\n      this.setState({\n        events: events.value\n      });\n    } catch (err) {\n      this.props.setError('ERROR', JSON.stringify(err));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 12\n      }\n    }, JSON.stringify(this.state.events, null, 2)));\n  }\n\n}\n\nexport default withAuthProvider(Calendar);","map":{"version":3,"sources":["D:/Assignment/graph-tutorial/src/Calendar.tsx"],"names":["React","moment","config","getEvents","withAuthProvider","formatDateTime","dateTime","undefined","utc","local","format","Calendar","Component","constructor","props","state","events","componentDidMount","accessToken","getAccessToken","scopes","setState","value","err","setError","JSON","stringify","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,OAAOC,gBAAP,MAAqD,gBAArD;;AAMA;AACA,SAASC,cAAT,CAAwBC,QAAxB,EAAsD;AACpD,MAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,WAAON,MAAM,CAACO,GAAP,CAAWF,QAAX,EAAqBG,KAArB,GAA6BC,MAA7B,CAAoC,eAApC,CAAP;AACD;AACF;;AAED,MAAMC,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAA0E;AACxEC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE;AADG,KAAb;AAGD;;AAED,QAAMC,iBAAN,GAA0B;AACxB,QAAI;AACF;AACA,UAAIC,WAAW,GAAG,MAAM,KAAKJ,KAAL,CAAWK,cAAX,CAA0BjB,MAAM,CAACkB,MAAjC,CAAxB,CAFE,CAGF;;AACA,UAAIJ,MAAM,GAAG,MAAMb,SAAS,CAACe,WAAD,CAA5B,CAJE,CAKF;;AACA,WAAKG,QAAL,CAAc;AAACL,QAAAA,MAAM,EAAEA,MAAM,CAACM;AAAhB,OAAd;AACD,KAPD,CAQA,OAAMC,GAAN,EAAW;AACT,WAAKT,KAAL,CAAWU,QAAX,CAAoB,OAApB,EAA6BC,IAAI,CAACC,SAAL,CAAeH,GAAf,CAA7B;AACD;AACF;;AAEDI,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOF,IAAI,CAACC,SAAL,CAAe,KAAKX,KAAL,CAAWC,MAA1B,EAAkC,IAAlC,EAAwC,CAAxC,CAAP,CAAL,CADF;AAGD;;AA3BuE;;AA8B1E,eAAeZ,gBAAgB,CAACO,QAAD,CAA/B","sourcesContent":["import React from 'react';\r\nimport { Table } from 'reactstrap';\r\nimport moment from 'moment';\r\nimport { Event } from 'microsoft-graph';\r\nimport { config } from './Config';\r\nimport { getEvents } from './GraphService';\r\nimport withAuthProvider, { AuthComponentProps } from './AuthProvider';\r\n\r\ninterface CalendarState {\r\n  events: Event[];\r\n}\r\n\r\n// Helper function to format Graph date/time\r\nfunction formatDateTime(dateTime: string | undefined) {\r\n  if (dateTime !== undefined) {\r\n    return moment.utc(dateTime).local().format('M/D/YY h:mm A');\r\n  }\r\n}\r\n\r\nclass Calendar extends React.Component<AuthComponentProps, CalendarState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      events: []\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      // Get the user's access token\r\n      var accessToken = await this.props.getAccessToken(config.scopes);\r\n      // Get the user's events\r\n      var events = await getEvents(accessToken);\r\n      // Update the array of events in state\r\n      this.setState({events: events.value});\r\n    }\r\n    catch(err) {\r\n      this.props.setError('ERROR', JSON.stringify(err));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <pre><code>{JSON.stringify(this.state.events, null, 2)}</code></pre>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withAuthProvider(Calendar);"]},"metadata":{},"sourceType":"module"}