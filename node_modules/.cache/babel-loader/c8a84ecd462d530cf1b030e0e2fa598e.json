{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { CryptoUtils } from \"./CryptoUtils\";\nimport { StringUtils } from \"./StringUtils\";\n/**\n * @hidden\n */\n\nvar TokenUtils =\n/** @class */\nfunction () {\n  function TokenUtils() {}\n  /**\n   * decode a JWT\n   *\n   * @param jwtToken\n   */\n\n\n  TokenUtils.decodeJwt = function (jwtToken) {\n    if (StringUtils.isEmpty(jwtToken)) {\n      return null;\n    }\n\n    var idTokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    var matches = idTokenPartsRegex.exec(jwtToken);\n\n    if (!matches || matches.length < 4) {\n      // this._requestContext.logger.warn(\"The returned id_token is not parseable.\");\n      return null;\n    }\n\n    var crackedToken = {\n      header: matches[1],\n      JWSPayload: matches[2],\n      JWSSig: matches[3]\n    };\n    return crackedToken;\n  };\n  /**\n   * Extract IdToken by decoding the RAWIdToken\n   *\n   * @param encodedIdToken\n   */\n\n\n  TokenUtils.extractIdToken = function (encodedIdToken) {\n    // id token will be decoded to get the username\n    var decodedToken = this.decodeJwt(encodedIdToken);\n\n    if (!decodedToken) {\n      return null;\n    }\n\n    try {\n      var base64IdToken = decodedToken.JWSPayload;\n      var base64Decoded = CryptoUtils.base64Decode(base64IdToken);\n\n      if (!base64Decoded) {\n        // this._requestContext.logger.info(\"The returned id_token could not be base64 url safe decoded.\");\n        return null;\n      } // ECMA script has JSON built-in support\n\n\n      return JSON.parse(base64Decoded);\n    } catch (err) {// this._requestContext.logger.error(\"The returned id_token could not be decoded\" + err);\n    }\n\n    return null;\n  };\n\n  return TokenUtils;\n}();\n\nexport { TokenUtils };","map":{"version":3,"sources":["../../src/utils/TokenUtils.ts"],"names":[],"mappings":"AAAA;;;;AAKA,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAS,WAAT,QAA4B,eAA5B;AAEA;;;;AAGA,IAAA,UAAA;AAAA;AAAA,YAAA;AAAA,WAAA,UAAA,GAAA,CAmDC;AAjDG;;;;;;;AAKO,EAAA,UAAA,CAAA,SAAA,GAAP,UAAiB,QAAjB,EAAiC;AAC7B,QAAI,WAAW,CAAC,OAAZ,CAAoB,QAApB,CAAJ,EAAmC;AAC/B,aAAO,IAAP;AACH;;AACD,QAAM,iBAAiB,GAAG,sCAA1B;AACA,QAAM,OAAO,GAAG,iBAAiB,CAAC,IAAlB,CAAuB,QAAvB,CAAhB;;AACA,QAAI,CAAC,OAAD,IAAY,OAAO,CAAC,MAAR,GAAiB,CAAjC,EAAoC;AAChC;AACA,aAAO,IAAP;AACH;;AACD,QAAM,YAAY,GAAG;AACjB,MAAA,MAAM,EAAE,OAAO,CAAC,CAAD,CADE;AAEjB,MAAA,UAAU,EAAE,OAAO,CAAC,CAAD,CAFF;AAGjB,MAAA,MAAM,EAAE,OAAO,CAAC,CAAD;AAHE,KAArB;AAKA,WAAO,YAAP;AACH,GAhBM;AAkBP;;;;;;;AAKO,EAAA,UAAA,CAAA,cAAA,GAAP,UAAsB,cAAtB,EAA4C;AAC5C;AACI,QAAM,YAAY,GAAG,KAAK,SAAL,CAAe,cAAf,CAArB;;AACA,QAAI,CAAC,YAAL,EAAmB;AACf,aAAO,IAAP;AACH;;AACD,QAAI;AACA,UAAM,aAAa,GAAG,YAAY,CAAC,UAAnC;AACA,UAAM,aAAa,GAAG,WAAW,CAAC,YAAZ,CAAyB,aAAzB,CAAtB;;AACA,UAAI,CAAC,aAAL,EAAoB;AAChB;AACA,eAAO,IAAP;AACH,OAND,CAOA;;;AACA,aAAO,IAAI,CAAC,KAAL,CAAW,aAAX,CAAP;AACH,KATD,CASE,OAAO,GAAP,EAAY,CACV;AACH;;AAED,WAAO,IAAP;AACH,GApBM;;AAqBX,SAAA,UAAA;AAAC,CAnDD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { CryptoUtils } from \"./CryptoUtils\";\nimport { StringUtils } from \"./StringUtils\";\n/**\n * @hidden\n */\nvar TokenUtils = /** @class */ (function () {\n    function TokenUtils() {\n    }\n    /**\n     * decode a JWT\n     *\n     * @param jwtToken\n     */\n    TokenUtils.decodeJwt = function (jwtToken) {\n        if (StringUtils.isEmpty(jwtToken)) {\n            return null;\n        }\n        var idTokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n        var matches = idTokenPartsRegex.exec(jwtToken);\n        if (!matches || matches.length < 4) {\n            // this._requestContext.logger.warn(\"The returned id_token is not parseable.\");\n            return null;\n        }\n        var crackedToken = {\n            header: matches[1],\n            JWSPayload: matches[2],\n            JWSSig: matches[3]\n        };\n        return crackedToken;\n    };\n    /**\n     * Extract IdToken by decoding the RAWIdToken\n     *\n     * @param encodedIdToken\n     */\n    TokenUtils.extractIdToken = function (encodedIdToken) {\n        // id token will be decoded to get the username\n        var decodedToken = this.decodeJwt(encodedIdToken);\n        if (!decodedToken) {\n            return null;\n        }\n        try {\n            var base64IdToken = decodedToken.JWSPayload;\n            var base64Decoded = CryptoUtils.base64Decode(base64IdToken);\n            if (!base64Decoded) {\n                // this._requestContext.logger.info(\"The returned id_token could not be base64 url safe decoded.\");\n                return null;\n            }\n            // ECMA script has JSON built-in support\n            return JSON.parse(base64Decoded);\n        }\n        catch (err) {\n            // this._requestContext.logger.error(\"The returned id_token could not be decoded\" + err);\n        }\n        return null;\n    };\n    return TokenUtils;\n}());\nexport { TokenUtils };\n//# sourceMappingURL=TokenUtils.js.map"]},"metadata":{},"sourceType":"module"}