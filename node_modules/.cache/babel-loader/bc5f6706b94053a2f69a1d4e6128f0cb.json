{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * @class\r\n * Class representing HTTPClient\r\n */\n\nexport class HTTPClient {\n  /**\r\n   * @public\r\n   * @constructor\r\n   * Creates an instance of a HTTPClient\r\n   * @param {Middleware} middleware - The first middleware of the middleware chain\r\n   */\n  constructor(middleware) {\n    this.middleware = middleware;\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * To send the request through the middleware chain\r\n   * @param {Context} context - The context of a request\r\n   * @returns A promise that resolves to the Context\r\n   */\n\n\n  sendRequest(context) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      try {\n        if (typeof context.request === \"string\" && context.options === undefined) {\n          const error = new Error();\n          error.name = \"InvalidRequestOptions\";\n          error.message = \"Unable to execute the middleware, Please provide valid options for a request\";\n          throw error;\n        }\n\n        yield this.middleware.execute(context);\n        return context;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/HTTPClient.ts"],"names":[],"mappings":"AAAA;;;;;;;AAcA;;;;;AAIA,OAAM,MAAO,UAAP,CAAiB;AAOtB;;;;;;AAMA,EAAA,WAAA,CAAmB,UAAnB,EAAyC;AACxC,SAAK,UAAL,GAAkB,UAAlB;AACA;AAED;;;;;;;;;AAOa,EAAA,WAAW,CAAC,OAAD,EAAiB;;AACxC,UAAI;AACH,YAAI,OAAO,OAAO,CAAC,OAAf,KAA2B,QAA3B,IAAuC,OAAO,CAAC,OAAR,KAAoB,SAA/D,EAA0E;AACzE,gBAAM,KAAK,GAAG,IAAI,KAAJ,EAAd;AACA,UAAA,KAAK,CAAC,IAAN,GAAa,uBAAb;AACA,UAAA,KAAK,CAAC,OAAN,GAAgB,8EAAhB;AACA,gBAAM,KAAN;AACA;;AACD,cAAM,KAAK,UAAL,CAAgB,OAAhB,CAAwB,OAAxB,CAAN;AACA,eAAO,OAAP;AACA,OATD,CASE,OAAO,KAAP,EAAc;AACf,cAAM,KAAN;AACA;AACD,K;AAAA;;AArCqB","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * @class\r\n * Class representing HTTPClient\r\n */\r\nexport class HTTPClient {\r\n    /**\r\n     * @public\r\n     * @constructor\r\n     * Creates an instance of a HTTPClient\r\n     * @param {Middleware} middleware - The first middleware of the middleware chain\r\n     */\r\n    constructor(middleware) {\r\n        this.middleware = middleware;\r\n    }\r\n    /**\r\n     * @public\r\n     * @async\r\n     * To send the request through the middleware chain\r\n     * @param {Context} context - The context of a request\r\n     * @returns A promise that resolves to the Context\r\n     */\r\n    sendRequest(context) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                if (typeof context.request === \"string\" && context.options === undefined) {\r\n                    const error = new Error();\r\n                    error.name = \"InvalidRequestOptions\";\r\n                    error.message = \"Unable to execute the middleware, Please provide valid options for a request\";\r\n                    throw error;\r\n                }\r\n                yield this.middleware.execute(context);\r\n                return context;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=HTTPClient.js.map"]},"metadata":{},"sourceType":"module"}