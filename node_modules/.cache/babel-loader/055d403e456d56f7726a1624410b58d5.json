{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { ClientAuthError } from \"./error/ClientAuthError\";\nimport { TokenUtils } from \"./utils/TokenUtils\";\nimport { StringUtils } from \"./utils/StringUtils\";\n/**\n * @hidden\n */\n\nvar IdToken =\n/** @class */\nfunction () {\n  /* tslint:disable:no-string-literal */\n  function IdToken(rawIdToken) {\n    if (StringUtils.isEmpty(rawIdToken)) {\n      throw ClientAuthError.createIdTokenNullOrEmptyError(rawIdToken);\n    }\n\n    try {\n      this.rawIdToken = rawIdToken;\n      this.claims = TokenUtils.extractIdToken(rawIdToken);\n\n      if (this.claims) {\n        if (this.claims.hasOwnProperty(\"iss\")) {\n          this.issuer = this.claims[\"iss\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"oid\")) {\n          this.objectId = this.claims[\"oid\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"sub\")) {\n          this.subject = this.claims[\"sub\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"tid\")) {\n          this.tenantId = this.claims[\"tid\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"ver\")) {\n          this.version = this.claims[\"ver\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"preferred_username\")) {\n          this.preferredName = this.claims[\"preferred_username\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"name\")) {\n          this.name = this.claims[\"name\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"nonce\")) {\n          this.nonce = this.claims[\"nonce\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"exp\")) {\n          this.expiration = this.claims[\"exp\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"home_oid\")) {\n          this.homeObjectId = this.claims[\"home_oid\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"sid\")) {\n          this.sid = this.claims[\"sid\"];\n        }\n\n        if (this.claims.hasOwnProperty(\"cloud_instance_host_name\")) {\n          this.cloudInstance = this.claims[\"cloud_instance_host_name\"];\n        }\n        /* tslint:enable:no-string-literal */\n\n      }\n    } catch (e) {\n      /*\n       * TODO: This error here won't really every be thrown, since extractIdToken() returns null if the decodeJwt() fails.\n       * Need to add better error handling here to account for being unable to decode jwts.\n       */\n      throw ClientAuthError.createIdTokenParsingError(e);\n    }\n  }\n\n  return IdToken;\n}();\n\nexport { IdToken };","map":{"version":3,"sources":["../src/IdToken.ts"],"names":[],"mappings":"AAAA;;;;AAKA,SAAS,eAAT,QAAgC,yBAAhC;AACA,SAAS,UAAT,QAA2B,oBAA3B;AAEA,SAAS,WAAT,QAA4B,qBAA5B;AAEA;;;;AAGA,IAAA,OAAA;AAAA;AAAA,YAAA;AAgBI;AACA,WAAA,OAAA,CAAY,UAAZ,EAA8B;AAC1B,QAAI,WAAW,CAAC,OAAZ,CAAoB,UAApB,CAAJ,EAAqC;AACjC,YAAM,eAAe,CAAC,6BAAhB,CAA8C,UAA9C,CAAN;AACH;;AACD,QAAI;AACA,WAAK,UAAL,GAAkB,UAAlB;AACA,WAAK,MAAL,GAAc,UAAU,CAAC,cAAX,CAA0B,UAA1B,CAAd;;AACA,UAAI,KAAK,MAAT,EAAiB;AACb,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AACnC,eAAK,MAAL,GAAc,KAAK,MAAL,CAAY,KAAZ,CAAd;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AACnC,eAAK,QAAL,GAAgB,KAAK,MAAL,CAAY,KAAZ,CAAhB;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AACnC,eAAK,OAAL,GAAe,KAAK,MAAL,CAAY,KAAZ,CAAf;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AACnC,eAAK,QAAL,GAAgB,KAAK,MAAL,CAAY,KAAZ,CAAhB;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AACnC,eAAK,OAAL,GAAe,KAAK,MAAL,CAAY,KAAZ,CAAf;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,oBAA3B,CAAJ,EAAsD;AAClD,eAAK,aAAL,GAAqB,KAAK,MAAL,CAAY,oBAAZ,CAArB;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,MAA3B,CAAJ,EAAwC;AACpC,eAAK,IAAL,GAAY,KAAK,MAAL,CAAY,MAAZ,CAAZ;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,OAA3B,CAAJ,EAAyC;AACrC,eAAK,KAAL,GAAa,KAAK,MAAL,CAAY,OAAZ,CAAb;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AACnC,eAAK,UAAL,GAAkB,KAAK,MAAL,CAAY,KAAZ,CAAlB;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,UAA3B,CAAJ,EAA4C;AACxC,eAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,UAAZ,CAApB;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,CAAJ,EAAuC;AACnC,eAAK,GAAL,GAAW,KAAK,MAAL,CAAY,KAAZ,CAAX;AACH;;AAED,YAAI,KAAK,MAAL,CAAY,cAAZ,CAA2B,0BAA3B,CAAJ,EAA4D;AACxD,eAAK,aAAL,GAAqB,KAAK,MAAL,CAAY,0BAAZ,CAArB;AACH;AACD;;AACH;AACJ,KArDD,CAqDE,OAAO,CAAP,EAAU;AACR;;;;AAIA,YAAM,eAAe,CAAC,yBAAhB,CAA0C,CAA1C,CAAN;AACH;AACJ;;AAEL,SAAA,OAAA;AAAC,CAnFD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { ClientAuthError } from \"./error/ClientAuthError\";\nimport { TokenUtils } from \"./utils/TokenUtils\";\nimport { StringUtils } from \"./utils/StringUtils\";\n/**\n * @hidden\n */\nvar IdToken = /** @class */ (function () {\n    /* tslint:disable:no-string-literal */\n    function IdToken(rawIdToken) {\n        if (StringUtils.isEmpty(rawIdToken)) {\n            throw ClientAuthError.createIdTokenNullOrEmptyError(rawIdToken);\n        }\n        try {\n            this.rawIdToken = rawIdToken;\n            this.claims = TokenUtils.extractIdToken(rawIdToken);\n            if (this.claims) {\n                if (this.claims.hasOwnProperty(\"iss\")) {\n                    this.issuer = this.claims[\"iss\"];\n                }\n                if (this.claims.hasOwnProperty(\"oid\")) {\n                    this.objectId = this.claims[\"oid\"];\n                }\n                if (this.claims.hasOwnProperty(\"sub\")) {\n                    this.subject = this.claims[\"sub\"];\n                }\n                if (this.claims.hasOwnProperty(\"tid\")) {\n                    this.tenantId = this.claims[\"tid\"];\n                }\n                if (this.claims.hasOwnProperty(\"ver\")) {\n                    this.version = this.claims[\"ver\"];\n                }\n                if (this.claims.hasOwnProperty(\"preferred_username\")) {\n                    this.preferredName = this.claims[\"preferred_username\"];\n                }\n                if (this.claims.hasOwnProperty(\"name\")) {\n                    this.name = this.claims[\"name\"];\n                }\n                if (this.claims.hasOwnProperty(\"nonce\")) {\n                    this.nonce = this.claims[\"nonce\"];\n                }\n                if (this.claims.hasOwnProperty(\"exp\")) {\n                    this.expiration = this.claims[\"exp\"];\n                }\n                if (this.claims.hasOwnProperty(\"home_oid\")) {\n                    this.homeObjectId = this.claims[\"home_oid\"];\n                }\n                if (this.claims.hasOwnProperty(\"sid\")) {\n                    this.sid = this.claims[\"sid\"];\n                }\n                if (this.claims.hasOwnProperty(\"cloud_instance_host_name\")) {\n                    this.cloudInstance = this.claims[\"cloud_instance_host_name\"];\n                }\n                /* tslint:enable:no-string-literal */\n            }\n        }\n        catch (e) {\n            /*\n             * TODO: This error here won't really every be thrown, since extractIdToken() returns null if the decodeJwt() fails.\n             * Need to add better error handling here to account for being unable to decode jwts.\n             */\n            throw ClientAuthError.createIdTokenParsingError(e);\n        }\n    }\n    return IdToken;\n}());\nexport { IdToken };\n//# sourceMappingURL=IdToken.js.map"]},"metadata":{},"sourceType":"module"}