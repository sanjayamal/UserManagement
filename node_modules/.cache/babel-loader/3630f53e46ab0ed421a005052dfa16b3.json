{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { TELEMETRY_BLOB_EVENT_NAMES } from \"./TelemetryConstants\";\nimport { EVENT_NAME_KEY, START_TIME_KEY, ELAPSED_TIME_KEY } from \"./TelemetryConstants\";\nimport { prependEventNamePrefix } from \"./TelemetryUtils\";\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\n\nvar TelemetryEvent =\n/** @class */\nfunction () {\n  function TelemetryEvent(eventName, correlationId) {\n    var _a;\n\n    this.startTimestamp = Date.now();\n    this.eventId = CryptoUtils.createNewGuid();\n    this.event = (_a = {}, _a[prependEventNamePrefix(EVENT_NAME_KEY)] = eventName, _a[prependEventNamePrefix(START_TIME_KEY)] = this.startTimestamp, _a[prependEventNamePrefix(ELAPSED_TIME_KEY)] = -1, _a[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = correlationId, _a);\n  }\n\n  TelemetryEvent.prototype.setElapsedTime = function (time) {\n    this.event[prependEventNamePrefix(ELAPSED_TIME_KEY)] = time;\n  };\n\n  TelemetryEvent.prototype.stop = function () {\n    // Set duration of event\n    this.setElapsedTime(+Date.now() - +this.startTimestamp);\n  };\n\n  Object.defineProperty(TelemetryEvent.prototype, \"telemetryCorrelationId\", {\n    get: function () {\n      return this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey];\n    },\n    set: function (value) {\n      this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TelemetryEvent.prototype, \"eventName\", {\n    get: function () {\n      return this.event[prependEventNamePrefix(EVENT_NAME_KEY)];\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TelemetryEvent.prototype.get = function () {\n    return tslib_1.__assign({}, this.event, {\n      eventId: this.eventId\n    });\n  };\n\n  return TelemetryEvent;\n}();\n\nexport default TelemetryEvent;","map":{"version":3,"sources":["../../src/telemetry/TelemetryEvent.ts"],"names":[],"mappings":";AAAA,SAAS,0BAAT,QAA2C,sBAA3C;AACA,SACI,cADJ,EAEI,cAFJ,EAGI,gBAHJ,QAIO,sBAJP;AAKA,SAAS,sBAAT,QAAuC,kBAAvC;AACA,SAAS,WAAT,QAA4B,sBAA5B;;AAEA,IAAA,cAAA;AAAA;AAAA,YAAA;AAMI,WAAA,cAAA,CAAY,SAAZ,EAA+B,aAA/B,EAAoD;;;AAEhD,SAAK,cAAL,GAAsB,IAAI,CAAC,GAAL,EAAtB;AACA,SAAK,OAAL,GAAe,WAAW,CAAC,aAAZ,EAAf;AACA,SAAK,KAAL,IAAU,EAAA,GAAA,EAAA,EACN,EAAA,CAAC,sBAAsB,CAAC,cAAD,CAAvB,CAAA,GAA0C,SADpC,EAEN,EAAA,CAAC,sBAAsB,CAAC,cAAD,CAAvB,CAAA,GAA0C,KAAK,cAFzC,EAGN,EAAA,CAAC,sBAAsB,CAAC,gBAAD,CAAvB,CAAA,GAA4C,CAAC,CAHvC,EAIN,EAAA,CAAC,KAAG,0BAA0B,CAAC,4BAA/B,CAAA,GAAgE,aAJ1D,EAKT,EALD;AAMH;;AAEO,EAAA,cAAA,CAAA,SAAA,CAAA,cAAA,GAAR,UAAuB,IAAvB,EAAmC;AAC/B,SAAK,KAAL,CAAW,sBAAsB,CAAC,gBAAD,CAAjC,IAAuD,IAAvD;AACH,GAFO;;AAID,EAAA,cAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AACI;AACA,SAAK,cAAL,CAAoB,CAAC,IAAI,CAAC,GAAL,EAAD,GAAc,CAAC,KAAK,cAAxC;AACH,GAHM;;AAKP,EAAA,MAAA,CAAA,cAAA,CAAW,cAAA,CAAA,SAAX,EAAW,wBAAX,EAAiC;SAAjC,YAAA;AACI,aAAO,KAAK,KAAL,CAAW,KAAG,0BAA0B,CAAC,4BAAzC,CAAP;AACH,KAFgC;SAIjC,UAAkC,KAAlC,EAA+C;AAC3C,WAAK,KAAL,CAAW,KAAG,0BAA0B,CAAC,4BAAzC,IAA2E,KAA3E;AACH,KANgC;oBAAA;;AAAA,GAAjC;AAQA,EAAA,MAAA,CAAA,cAAA,CAAW,cAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;SAApB,YAAA;AACI,aAAO,KAAK,KAAL,CAAW,sBAAsB,CAAC,cAAD,CAAjC,CAAP;AACH,KAFmB;oBAAA;;AAAA,GAApB;;AAIO,EAAA,cAAA,CAAA,SAAA,CAAA,GAAA,GAAP,YAAA;AACI,WAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EACO,KAAK,KADZ,EACiB;AACb,MAAA,OAAO,EAAE,KAAK;AADD,KADjB,CAAA;AAIH,GALM;;AAMX,SAAA,cAAA;AAAC,CA7CD,EAAA","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { TELEMETRY_BLOB_EVENT_NAMES } from \"./TelemetryConstants\";\nimport { EVENT_NAME_KEY, START_TIME_KEY, ELAPSED_TIME_KEY } from \"./TelemetryConstants\";\nimport { prependEventNamePrefix } from \"./TelemetryUtils\";\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\nvar TelemetryEvent = /** @class */ (function () {\n    function TelemetryEvent(eventName, correlationId) {\n        var _a;\n        this.startTimestamp = Date.now();\n        this.eventId = CryptoUtils.createNewGuid();\n        this.event = (_a = {},\n            _a[prependEventNamePrefix(EVENT_NAME_KEY)] = eventName,\n            _a[prependEventNamePrefix(START_TIME_KEY)] = this.startTimestamp,\n            _a[prependEventNamePrefix(ELAPSED_TIME_KEY)] = -1,\n            _a[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = correlationId,\n            _a);\n    }\n    TelemetryEvent.prototype.setElapsedTime = function (time) {\n        this.event[prependEventNamePrefix(ELAPSED_TIME_KEY)] = time;\n    };\n    TelemetryEvent.prototype.stop = function () {\n        // Set duration of event\n        this.setElapsedTime(+Date.now() - +this.startTimestamp);\n    };\n    Object.defineProperty(TelemetryEvent.prototype, \"telemetryCorrelationId\", {\n        get: function () {\n            return this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey];\n        },\n        set: function (value) {\n            this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TelemetryEvent.prototype, \"eventName\", {\n        get: function () {\n            return this.event[prependEventNamePrefix(EVENT_NAME_KEY)];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TelemetryEvent.prototype.get = function () {\n        return tslib_1.__assign({}, this.event, { eventId: this.eventId });\n    };\n    return TelemetryEvent;\n}());\nexport default TelemetryEvent;\n//# sourceMappingURL=TelemetryEvent.js.map"]},"metadata":{},"sourceType":"module"}