{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Logger } from \"./Logger\";\nimport { UrlUtils } from \"./utils/UrlUtils\";\n/**\n * Defaults for the Configuration Options\n */\n\nvar FRAME_TIMEOUT = 6000;\nvar OFFSET = 300;\nvar NAVIGATE_FRAME_WAIT = 500;\nvar DEFAULT_AUTH_OPTIONS = {\n  clientId: \"\",\n  authority: null,\n  validateAuthority: true,\n  redirectUri: function () {\n    return UrlUtils.getDefaultRedirectUri();\n  },\n  postLogoutRedirectUri: function () {\n    return UrlUtils.getDefaultRedirectUri();\n  },\n  navigateToLoginRequestUrl: true\n};\nvar DEFAULT_CACHE_OPTIONS = {\n  cacheLocation: \"sessionStorage\",\n  storeAuthStateInCookie: false\n};\nvar DEFAULT_SYSTEM_OPTIONS = {\n  logger: new Logger(null),\n  loadFrameTimeout: FRAME_TIMEOUT,\n  tokenRenewalOffsetSeconds: OFFSET,\n  navigateFrameWait: NAVIGATE_FRAME_WAIT\n};\nvar DEFAULT_FRAMEWORK_OPTIONS = {\n  isAngular: false,\n  unprotectedResources: new Array(),\n  protectedResourceMap: new Map()\n};\n/**\n * MSAL function that sets the default options when not explicitly configured from app developer\n *\n * @param TAuthOptions\n * @param TCacheOptions\n * @param TSystemOptions\n * @param TFrameworkOptions\n *\n * @returns TConfiguration object\n */\n\nexport function buildConfiguration(_a) {\n  var auth = _a.auth,\n      _b = _a.cache,\n      cache = _b === void 0 ? {} : _b,\n      _c = _a.system,\n      system = _c === void 0 ? {} : _c,\n      _d = _a.framework,\n      framework = _d === void 0 ? {} : _d;\n  var overlayedConfig = {\n    auth: tslib_1.__assign({}, DEFAULT_AUTH_OPTIONS, auth),\n    cache: tslib_1.__assign({}, DEFAULT_CACHE_OPTIONS, cache),\n    system: tslib_1.__assign({}, DEFAULT_SYSTEM_OPTIONS, system),\n    framework: tslib_1.__assign({}, DEFAULT_FRAMEWORK_OPTIONS, framework)\n  };\n  return overlayedConfig;\n}","map":{"version":3,"sources":["../src/Configuration.ts"],"names":[],"mappings":"AAAA;;;;;AAKA,SAAS,MAAT,QAAuB,UAAvB;AACA,SAAS,QAAT,QAAyB,kBAAzB;AAUA;;;;AAGA,IAAM,aAAa,GAAG,IAAtB;AACA,IAAM,MAAM,GAAG,GAAf;AACA,IAAM,mBAAmB,GAAG,GAA5B;AA4FA,IAAM,oBAAoB,GAAgB;AACtC,EAAA,QAAQ,EAAE,EAD4B;AAEtC,EAAA,SAAS,EAAE,IAF2B;AAGtC,EAAA,iBAAiB,EAAE,IAHmB;AAItC,EAAA,WAAW,EAAE,YAAA;AAAM,WAAA,QAAQ,CAAR,qBAAA,EAAA;AAAgC,GAJb;AAKtC,EAAA,qBAAqB,EAAE,YAAA;AAAM,WAAA,QAAQ,CAAR,qBAAA,EAAA;AAAgC,GALvB;AAMtC,EAAA,yBAAyB,EAAE;AANW,CAA1C;AASA,IAAM,qBAAqB,GAAiB;AACxC,EAAA,aAAa,EAAE,gBADyB;AAExC,EAAA,sBAAsB,EAAE;AAFgB,CAA5C;AAKA,IAAM,sBAAsB,GAAkB;AAC1C,EAAA,MAAM,EAAE,IAAI,MAAJ,CAAW,IAAX,CADkC;AAE1C,EAAA,gBAAgB,EAAE,aAFwB;AAG1C,EAAA,yBAAyB,EAAE,MAHe;AAI1C,EAAA,iBAAiB,EAAE;AAJuB,CAA9C;AAOA,IAAM,yBAAyB,GAAqB;AAChD,EAAA,SAAS,EAAE,KADqC;AAEhD,EAAA,oBAAoB,EAAE,IAAI,KAAJ,EAF0B;AAGhD,EAAA,oBAAoB,EAAE,IAAI,GAAJ;AAH0B,CAApD;AAMA;;;;;;;;;;;AAWA,OAAM,SAAU,kBAAV,CAA6B,EAA7B,EAA4F;MAA7D,IAAA,GAAA,EAAA,CAAA,I;MAAM,EAAA,GAAA,EAAA,CAAA,K;MAAA,KAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,E;MAAY,EAAA,GAAA,EAAA,CAAA,M;MAAA,MAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,E;MAAa,EAAA,GAAA,EAAA,CAAA,S;MAAA,SAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,E;AAChE,MAAM,eAAe,GAAkB;AACnC,IAAA,IAAI,EAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAO,oBAAP,EAAgC,IAAhC,CAD+B;AAEnC,IAAA,KAAK,EAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAO,qBAAP,EAAiC,KAAjC,CAF8B;AAGnC,IAAA,MAAM,EAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAO,sBAAP,EAAkC,MAAlC,CAH6B;AAInC,IAAA,SAAS,EAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAO,yBAAP,EAAqC,SAArC;AAJ0B,GAAvC;AAMA,SAAO,eAAP;AACH","sourceRoot":"","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Logger } from \"./Logger\";\nimport { UrlUtils } from \"./utils/UrlUtils\";\n/**\n * Defaults for the Configuration Options\n */\nvar FRAME_TIMEOUT = 6000;\nvar OFFSET = 300;\nvar NAVIGATE_FRAME_WAIT = 500;\nvar DEFAULT_AUTH_OPTIONS = {\n    clientId: \"\",\n    authority: null,\n    validateAuthority: true,\n    redirectUri: function () { return UrlUtils.getDefaultRedirectUri(); },\n    postLogoutRedirectUri: function () { return UrlUtils.getDefaultRedirectUri(); },\n    navigateToLoginRequestUrl: true\n};\nvar DEFAULT_CACHE_OPTIONS = {\n    cacheLocation: \"sessionStorage\",\n    storeAuthStateInCookie: false\n};\nvar DEFAULT_SYSTEM_OPTIONS = {\n    logger: new Logger(null),\n    loadFrameTimeout: FRAME_TIMEOUT,\n    tokenRenewalOffsetSeconds: OFFSET,\n    navigateFrameWait: NAVIGATE_FRAME_WAIT\n};\nvar DEFAULT_FRAMEWORK_OPTIONS = {\n    isAngular: false,\n    unprotectedResources: new Array(),\n    protectedResourceMap: new Map()\n};\n/**\n * MSAL function that sets the default options when not explicitly configured from app developer\n *\n * @param TAuthOptions\n * @param TCacheOptions\n * @param TSystemOptions\n * @param TFrameworkOptions\n *\n * @returns TConfiguration object\n */\nexport function buildConfiguration(_a) {\n    var auth = _a.auth, _b = _a.cache, cache = _b === void 0 ? {} : _b, _c = _a.system, system = _c === void 0 ? {} : _c, _d = _a.framework, framework = _d === void 0 ? {} : _d;\n    var overlayedConfig = {\n        auth: tslib_1.__assign({}, DEFAULT_AUTH_OPTIONS, auth),\n        cache: tslib_1.__assign({}, DEFAULT_CACHE_OPTIONS, cache),\n        system: tslib_1.__assign({}, DEFAULT_SYSTEM_OPTIONS, system),\n        framework: tslib_1.__assign({}, DEFAULT_FRAMEWORK_OPTIONS, framework)\n    };\n    return overlayedConfig;\n}\n//# sourceMappingURL=Configuration.js.map"]},"metadata":{},"sourceType":"module"}