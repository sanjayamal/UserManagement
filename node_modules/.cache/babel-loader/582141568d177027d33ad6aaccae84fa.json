{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\nimport { StringUtils } from \"./utils/StringUtils\";\n/**\n * accountIdentifier       combination of idToken.uid and idToken.utid\n * homeAccountIdentifier   combination of clientInfo.uid and clientInfo.utid\n * userName                idToken.preferred_username\n * name                    idToken.name\n * idToken                 idToken\n * sid                     idToken.sid - session identifier\n * environment             idtoken.issuer (the authority that issues the token)\n */\n\nvar Account =\n/** @class */\nfunction () {\n  /**\n   * Creates an Account Object\n   * @praram accountIdentifier\n   * @param homeAccountIdentifier\n   * @param userName\n   * @param name\n   * @param idToken\n   * @param sid\n   * @param environment\n   */\n  function Account(accountIdentifier, homeAccountIdentifier, userName, name, idTokenClaims, sid, environment) {\n    this.accountIdentifier = accountIdentifier;\n    this.homeAccountIdentifier = homeAccountIdentifier;\n    this.userName = userName;\n    this.name = name; // will be deprecated soon\n\n    this.idToken = idTokenClaims;\n    this.idTokenClaims = idTokenClaims;\n    this.sid = sid;\n    this.environment = environment;\n  }\n  /**\n   * @hidden\n   * @param idToken\n   * @param clientInfo\n   */\n\n\n  Account.createAccount = function (idToken, clientInfo) {\n    // create accountIdentifier\n    var accountIdentifier = idToken.objectId || idToken.subject; // create homeAccountIdentifier\n\n    var uid = clientInfo ? clientInfo.uid : \"\";\n    var utid = clientInfo ? clientInfo.utid : \"\";\n    var homeAccountIdentifier;\n\n    if (!StringUtils.isEmpty(uid) && !StringUtils.isEmpty(utid)) {\n      homeAccountIdentifier = CryptoUtils.base64Encode(uid) + \".\" + CryptoUtils.base64Encode(utid);\n    }\n\n    return new Account(accountIdentifier, homeAccountIdentifier, idToken.preferredName, idToken.name, idToken.claims, idToken.sid, idToken.issuer);\n  };\n  /**\n   * Utils function to compare two Account objects - used to check if the same user account is logged in\n   *\n   * @param a1: Account object\n   * @param a2: Account object\n   */\n\n\n  Account.compareAccounts = function (a1, a2) {\n    if (!a1 || !a2) {\n      return false;\n    }\n\n    if (a1.homeAccountIdentifier && a2.homeAccountIdentifier) {\n      if (a1.homeAccountIdentifier === a2.homeAccountIdentifier) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  return Account;\n}();\n\nexport { Account };","map":{"version":3,"sources":["../src/Account.ts"],"names":[],"mappings":"AAAA;;;;AAOA,SAAS,WAAT,QAA4B,qBAA5B;AACA,SAAS,WAAT,QAA4B,qBAA5B;AAGA;;;;;;;;;;AASA,IAAA,OAAA;AAAA;AAAA,YAAA;AAWI;;;;;;;;;;AAUA,WAAA,OAAA,CAAY,iBAAZ,EAAuC,qBAAvC,EAAsE,QAAtE,EAAwF,IAAxF,EAAsG,aAAtG,EAAiI,GAAjI,EAA+I,WAA/I,EAAkK;AAC9J,SAAK,iBAAL,GAAyB,iBAAzB;AACA,SAAK,qBAAL,GAA6B,qBAA7B;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,IAAL,GAAY,IAAZ,CAJ8J,CAK9J;;AACA,SAAK,OAAL,GAAe,aAAf;AACA,SAAK,aAAL,GAAqB,aAArB;AACA,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,WAAL,GAAmB,WAAnB;AACH;AAED;;;;;;;AAKO,EAAA,OAAA,CAAA,aAAA,GAAP,UAAqB,OAArB,EAAuC,UAAvC,EAA6D;AAEzD;AACA,QAAM,iBAAiB,GAAW,OAAO,CAAC,QAAR,IAAqB,OAAO,CAAC,OAA/D,CAHyD,CAKzD;;AACA,QAAM,GAAG,GAAW,UAAU,GAAG,UAAU,CAAC,GAAd,GAAoB,EAAlD;AACA,QAAM,IAAI,GAAW,UAAU,GAAG,UAAU,CAAC,IAAd,GAAqB,EAApD;AAEA,QAAI,qBAAJ;;AACA,QAAI,CAAC,WAAW,CAAC,OAAZ,CAAoB,GAApB,CAAD,IAA6B,CAAC,WAAW,CAAC,OAAZ,CAAoB,IAApB,CAAlC,EAA6D;AACzD,MAAA,qBAAqB,GAAG,WAAW,CAAC,YAAZ,CAAyB,GAAzB,IAAgC,GAAhC,GAAsC,WAAW,CAAC,YAAZ,CAAyB,IAAzB,CAA9D;AACH;;AACD,WAAO,IAAI,OAAJ,CAAY,iBAAZ,EAA+B,qBAA/B,EAAsD,OAAO,CAAC,aAA9D,EAA6E,OAAO,CAAC,IAArF,EAA2F,OAAO,CAAC,MAAnG,EAA2G,OAAO,CAAC,GAAnH,EAAwH,OAAO,CAAC,MAAhI,CAAP;AACH,GAdM;AAgBP;;;;;;;;AAMO,EAAA,OAAA,CAAA,eAAA,GAAP,UAAuB,EAAvB,EAAoC,EAApC,EAA+C;AAC3C,QAAI,CAAC,EAAD,IAAO,CAAC,EAAZ,EAAgB;AACZ,aAAO,KAAP;AACH;;AACD,QAAI,EAAE,CAAC,qBAAH,IAA4B,EAAE,CAAC,qBAAnC,EAA0D;AACtD,UAAI,EAAE,CAAC,qBAAH,KAA6B,EAAE,CAAC,qBAApC,EAA2D;AACvD,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GAVM;;AAWX,SAAA,OAAA;AAAC,CAvED,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\nimport { StringUtils } from \"./utils/StringUtils\";\n/**\n * accountIdentifier       combination of idToken.uid and idToken.utid\n * homeAccountIdentifier   combination of clientInfo.uid and clientInfo.utid\n * userName                idToken.preferred_username\n * name                    idToken.name\n * idToken                 idToken\n * sid                     idToken.sid - session identifier\n * environment             idtoken.issuer (the authority that issues the token)\n */\nvar Account = /** @class */ (function () {\n    /**\n     * Creates an Account Object\n     * @praram accountIdentifier\n     * @param homeAccountIdentifier\n     * @param userName\n     * @param name\n     * @param idToken\n     * @param sid\n     * @param environment\n     */\n    function Account(accountIdentifier, homeAccountIdentifier, userName, name, idTokenClaims, sid, environment) {\n        this.accountIdentifier = accountIdentifier;\n        this.homeAccountIdentifier = homeAccountIdentifier;\n        this.userName = userName;\n        this.name = name;\n        // will be deprecated soon\n        this.idToken = idTokenClaims;\n        this.idTokenClaims = idTokenClaims;\n        this.sid = sid;\n        this.environment = environment;\n    }\n    /**\n     * @hidden\n     * @param idToken\n     * @param clientInfo\n     */\n    Account.createAccount = function (idToken, clientInfo) {\n        // create accountIdentifier\n        var accountIdentifier = idToken.objectId || idToken.subject;\n        // create homeAccountIdentifier\n        var uid = clientInfo ? clientInfo.uid : \"\";\n        var utid = clientInfo ? clientInfo.utid : \"\";\n        var homeAccountIdentifier;\n        if (!StringUtils.isEmpty(uid) && !StringUtils.isEmpty(utid)) {\n            homeAccountIdentifier = CryptoUtils.base64Encode(uid) + \".\" + CryptoUtils.base64Encode(utid);\n        }\n        return new Account(accountIdentifier, homeAccountIdentifier, idToken.preferredName, idToken.name, idToken.claims, idToken.sid, idToken.issuer);\n    };\n    /**\n     * Utils function to compare two Account objects - used to check if the same user account is logged in\n     *\n     * @param a1: Account object\n     * @param a2: Account object\n     */\n    Account.compareAccounts = function (a1, a2) {\n        if (!a1 || !a2) {\n            return false;\n        }\n        if (a1.homeAccountIdentifier && a2.homeAccountIdentifier) {\n            if (a1.homeAccountIdentifier === a2.homeAccountIdentifier) {\n                return true;\n            }\n        }\n        return false;\n    };\n    return Account;\n}());\nexport { Account };\n//# sourceMappingURL=Account.js.map"]},"metadata":{},"sourceType":"module"}